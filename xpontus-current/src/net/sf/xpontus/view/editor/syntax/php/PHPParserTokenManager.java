/* Generated By:JavaCC: Do not edit this line. PHPParserTokenManager.java */
package net.sf.xpontus.view.editor.syntax.php;

import net.sf.xpontus.view.editor.syntax.CharStream;
import net.sf.xpontus.view.editor.syntax.Token;
import net.sf.xpontus.view.editor.syntax.TokenMgrError;


public class PHPParserTokenManager implements PHPParserConstants
  {
    static String HereDocEnd;
    static final long[] jjbitVec0 = 
        {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
        };
    static final int[] jjnextStates = 
        {
            59, 60, 65, 66, 69, 70, 8, 78, 83, 10, 11, 13, 74, 76, 2, 79, 80, 82,
            4, 5, 8, 61, 62, 8, 69, 70, 8, 85, 86, 88, 92, 95, 55, 57, 46, 48, 6,
            7, 63, 64, 67, 68, 71, 72, 1, 2, 4, 5,
        };
    public static final String[] jjstrLiteralImages = 
        {
            "", null, "\74\77\75", null, null, null, null, null, null, null,
            null, null, null, null, null, "\42", "\47", "\74\74\74", null, null,
            null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, "\42", null, null, null, null, null, null, null,
            null, null, null, null, null,
            "\162\145\161\165\151\162\145\137\157\156\143\145",
            "\162\145\161\165\151\162\145",
            "\151\156\143\154\165\144\145\137\157\156\143\145",
            "\151\156\143\154\165\144\145", "\144\145\146\151\156\145",
            "\145\143\150\157", "\160\162\151\156\164",
            "\163\167\151\164\143\150", "\143\141\163\145",
            "\144\145\146\141\165\154\164", "\142\162\145\141\153",
            "\162\145\164\165\162\156", "\144\157", "\167\150\151\154\145",
            "\146\157\162\145\141\143\150", "\141\163", "\146\157\162",
            "\143\157\156\164\151\156\165\145", "\151\146", "\145\154\163\145",
            "\145\154\163\145\151\146", "\141\156\144", "\157\162",
            "\170\157\162", "\156\157\164", "\146\165\156\143\164\151\157\156",
            "\143\154\141\163\163", "\145\170\164\145\156\144\163",
            "\166\141\162", "\160\165\142\154\151\143",
            "\160\162\151\166\141\164\145",
            "\160\162\157\164\145\143\164\145\144",
            "\141\142\163\164\162\141\143\164", "\146\151\156\141\154",
            "\163\164\141\164\151\143", "\151\156\164\145\162\146\141\143\145",
            "\151\155\160\154\145\155\145\156\164\163", "\143\157\156\163\164",
            "\143\154\157\156\145", "\151\156\163\164\141\156\143\145\157\146",
            "\147\154\157\142\141\154", "\141\162\162\141\171", "\156\145\167",
            null, "\77\76", "\44", "\73", "\164\162\171", "\143\141\164\143\150",
            "\164\150\162\157\167", null, null, null, "\44", null, null, null,
            null, "\50", "\51", "\54", "\72", "\173", "\175", "\75\76", "\46",
            "\75", "\100", "\53\75", "\55\75", "\52\75", "\57\75", "\56\75",
            "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75",
            "\77", "\174\174", "\46\46", "\174", "\136", "\75\75", "\41\75",
            "\75\75\75", "\41\75\75", "\74", "\76", "\74\75", "\76\75", "\74\74",
            "\76\76", "\53", "\55", "\56", "\52", "\57", "\45", "\176", "\41",
            "\53\53", "\55\55", "\55\76", "\72\72", "\133", "\135",
        };
    public static final String[] lexStateNames = 
        {
            "HTML_STATE", "DEFAULT", "SINGLE_STRING_LITERAL", "SSL_SPECIAL",
            "DOUBLE_STRING_LITERAL", "DSL_COMPLEX_VAR", "DSL_SIMPLE_VAR",
            "DSL_SPECIAL", "HEREDOC1", "HEREDOC", "HEREDOC2", "VAR_NAME_STATE",
        };
    public static final int[] jjnewLexState = 
        {
            -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 2, 8,
            -1, -1, -1, 3, 1, -1, 2, 2, 1, 6, 5, 7, -1, 4, -1, 4, 1, 4, 4, 4, 4,
            4, 9, -1, 10, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            0, 11, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        };
    static final long[] jjtoToken = 
        {
            0xffff800e9c5fa21fL, 0xfffffe73ffffffffL, 0x7ffffffL,
        };
    static final long[] jjtoSkip = { 0x7f00000001e0L, 0x0L, 0x0L, };
    static final long[] jjtoMore = { 0xf163a00000L, 0x0L, 0x0L, };
    public java.io.PrintStream debugStream = System.out;
    protected CharStream input_stream;
    private final int[] jjrounds = new int[96];
    private final int[] jjstateSet = new int[192];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;
    int curLexState = 1;
    int defaultLexState = 1;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public PHPParserTokenManager(CharStream stream)
      {
        input_stream = stream;
      }

    public PHPParserTokenManager(CharStream stream, int lexState)
      {
        this(stream);
        SwitchTo(lexState);
      }

    public void setDebugStream(java.io.PrintStream ds)
      {
        debugStream = ds;
      }

    private final int jjStopAtPos(int pos, int kind)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        return pos + 1;
      }

    private final int jjMoveStringLiteralDfa0_2()
      {
        switch (curChar)
          {
        case 39:
            return jjStopAtPos(0, 22);

        case 92:
            return jjStopAtPos(0, 21);

        default:
            return 1;
          }
      }

    private final int jjStopStringLiteralDfa_11(int pos, long active0,
        long active1)
      {
        switch (pos)
          {
        default:
            return -1;
          }
      }

    private final int jjStartNfa_11(int pos, long active0, long active1)
      {
        return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1),
            pos + 1);
      }

    private final int jjStartNfaWithStates_11(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_11(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_11()
      {
        switch (curChar)
          {
        case 36:
            return jjStopAtPos(0, 100);

        default:
            return jjMoveNfa_11(0, 0);
          }
      }

    private final void jjCheckNAdd(int state)
      {
        if (jjrounds[state] != jjround)
          {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
          }
      }

    private final void jjAddStates(int start, int end)
      {
        do
          {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
          }
        while (start++ != end);
      }

    private final void jjCheckNAddTwoStates(int state1, int state2)
      {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
      }

    private final void jjCheckNAddStates(int start, int end)
      {
        do
          {
            jjCheckNAdd(jjnextStates[start]);
          }
        while (start++ != end);
      }

    private final void jjCheckNAddStates(int start)
      {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
      }

    private final int jjMoveNfa_11(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 2;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        kind = 97;
                        jjstateSet[jjnewStateCnt++] = 1;

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:
                    case 1:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 97)
                          {
                            kind = 97;
                          }

                        jjCheckNAdd(1);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 2 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjMoveStringLiteralDfa0_5()
      {
        switch (curChar)
          {
        case 125:
            return jjStopAtPos(0, 31);

        default:
            return 1;
          }
      }

    private final int jjStopStringLiteralDfa_0(int pos, long active0)
      {
        switch (pos)
          {
        case 0:

            if ((active0 & 0x4L) != 0L)
              {
                return 0;
              }

            return -1;

        case 1:

            if ((active0 & 0x4L) != 0L)
              {
                jjmatchedKind = 1;
                jjmatchedPos = 1;

                return 3;
              }

            return -1;

        default:
            return -1;
          }
      }

    private final int jjStartNfa_0(int pos, long active0)
      {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
      }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_0(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_0()
      {
        switch (curChar)
          {
        case 60:
            return jjMoveStringLiteralDfa1_0(0x4L);

        default:
            return jjMoveNfa_0(4, 0);
          }
      }

    private final int jjMoveStringLiteralDfa1_0(long active0)
      {
        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(0, active0);

            return 1;
          }

        switch (curChar)
          {
        case 63:
            return jjMoveStringLiteralDfa2_0(active0, 0x4L);

        default:
            break;
          }

        return jjStartNfa_0(0, active0);
      }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(0, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(1, active0);

            return 2;
          }

        switch (curChar)
          {
        case 61:

            if ((active0 & 0x4L) != 0L)
              {
                return jjStopAtPos(2, 2);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_0(1, active0);
      }

    private final int jjMoveNfa_0(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 10;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((0x7fffffffffffffffL & l) != 0L)
                          {
                            if (kind > 4)
                              {
                                kind = 4;
                              }

                            jjCheckNAddTwoStates(5, 6);
                          }
                        else if (curChar == 63)
                          {
                            if (kind > 1)
                              {
                                kind = 1;
                              }

                            jjstateSet[jjnewStateCnt++] = 3;
                          }

                        if (kind > 3)
                          {
                            kind = 3;
                          }

                        break;

                    case 4:

                        if ((0xefffffffffffffffL & l) != 0L)
                          {
                            if (kind > 4)
                              {
                                kind = 4;
                              }

                            jjCheckNAddTwoStates(5, 6);
                          }
                        else if (curChar == 60)
                          {
                            jjCheckNAddTwoStates(9, 7);
                          }

                        if (curChar == 60)
                          {
                            jjstateSet[jjnewStateCnt++] = 0;
                          }

                        break;

                    case 5:

                        if ((0xefffffffffffffffL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        break;

                    case 6:

                        if (curChar == 60)
                          {
                            jjCheckNAdd(7);
                          }

                        break;

                    case 7:

                        if ((0x7fffffffffffffffL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        break;

                    case 8:

                        if (curChar == 60)
                          {
                            jjCheckNAddTwoStates(9, 7);
                          }

                        break;

                    case 9:

                        if (kind > 3)
                          {
                            kind = 3;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        if (kind > 3)
                          {
                            kind = 3;
                          }

                        break;

                    case 4:
                    case 5:

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        break;

                    case 1:

                        if (((0x1000000010000L & l) != 0L) && (kind > 1))
                          {
                            kind = 1;
                          }

                        break;

                    case 2:

                        if ((0x10000000100L & l) != 0L)
                          {
                            jjstateSet[jjnewStateCnt++] = 1;
                          }

                        break;

                    case 3:

                        if ((0x1000000010000L & l) != 0L)
                          {
                            jjstateSet[jjnewStateCnt++] = 2;
                          }

                        break;

                    case 7:

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        break;

                    case 9:

                        if (kind > 3)
                          {
                            kind = 3;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            if (kind > 3)
                              {
                                kind = 3;
                              }
                          }

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            if (kind > 4)
                              {
                                kind = 4;
                              }

                            jjCheckNAddTwoStates(5, 6);
                          }

                        break;

                    case 4:
                    case 5:

                        if ((jjbitVec0[i2] & l2) == 0L)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        break;

                    case 7:

                        if ((jjbitVec0[i2] & l2) == 0L)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(5, 6);

                        break;

                    case 9:

                        if (((jjbitVec0[i2] & l2) != 0L) && (kind > 3))
                          {
                            kind = 3;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 10 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjMoveStringLiteralDfa0_3()
      {
        return jjMoveNfa_3(0, 0);
      }

    private final int jjMoveNfa_3(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 1;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if (curChar == 39)
                          {
                            kind = 24;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if (curChar == 92)
                          {
                            kind = 24;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 1 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjMoveStringLiteralDfa0_7()
      {
        return jjMoveNfa_7(0, 0);
      }

    private final int jjMoveNfa_7(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 8;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((0xff000000000000L & l) != 0L)
                          {
                            if (kind > 37)
                              {
                                kind = 37;
                              }

                            jjCheckNAdd(2);
                          }
                        else if ((0x1400000000L & l) != 0L)
                          {
                            if (kind > 36)
                              {
                                kind = 36;
                              }
                          }

                        if ((0xf000000000000L & l) != 0L)
                          {
                            jjstateSet[jjnewStateCnt++] = 4;
                          }

                        break;

                    case 1:

                        if ((0xff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 37)
                          {
                            kind = 37;
                          }

                        jjCheckNAdd(2);

                        break;

                    case 2:

                        if (((0xff000000000000L & l) != 0L) && (kind > 37))
                          {
                            kind = 37;
                          }

                        break;

                    case 3:

                        if ((0xf000000000000L & l) != 0L)
                          {
                            jjstateSet[jjnewStateCnt++] = 4;
                          }

                        break;

                    case 4:

                        if ((0xff000000000000L & l) != 0L)
                          {
                            jjCheckNAdd(2);
                          }

                        break;

                    case 6:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 38)
                          {
                            kind = 38;
                          }

                        jjstateSet[jjnewStateCnt++] = 7;

                        break;

                    case 7:

                        if (((0x3ff000000000000L & l) != 0L) && (kind > 38))
                          {
                            kind = 38;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((0x814404410000000L & l) != 0L)
                          {
                            if (kind > 36)
                              {
                                kind = 36;
                              }
                          }
                        else if ((0x100000001000000L & l) != 0L)
                          {
                            jjstateSet[jjnewStateCnt++] = 6;
                          }

                        break;

                    case 5:

                        if ((0x100000001000000L & l) != 0L)
                          {
                            jjstateSet[jjnewStateCnt++] = 6;
                          }

                        break;

                    case 6:

                        if ((0x7e0000007eL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 38)
                          {
                            kind = 38;
                          }

                        jjstateSet[jjnewStateCnt++] = 7;

                        break;

                    case 7:

                        if (((0x7e0000007eL & l) != 0L) && (kind > 38))
                          {
                            kind = 38;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 8 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjStopStringLiteralDfa_9(int pos, long active0)
      {
        switch (pos)
          {
        default:
            return -1;
          }
      }

    private final int jjStartNfa_9(int pos, long active0)
      {
        return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
      }

    private final int jjStartNfaWithStates_9(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_9(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_9()
      {
        switch (curChar)
          {
        case 10:
            return jjStopAtPos(0, 42);

        default:
            return jjMoveNfa_9(0, 0);
          }
      }

    private final int jjMoveNfa_9(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 2;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((0xfffffffffffffbffL & l) != 0L)
                          {
                            if (kind > 41)
                              {
                                kind = 41;
                              }
                          }

                        if ((0x100002000L & l) != 0L)
                          {
                            if (kind > 43)
                              {
                                kind = 43;
                              }
                          }

                        break;

                    case 1:

                        if (((0x100002000L & l) != 0L) && (kind > 43))
                          {
                            kind = 43;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:
                        kind = 41;

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if (((jjbitVec0[i2] & l2) != 0L) && (kind > 41))
                          {
                            kind = 41;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 2 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjStopStringLiteralDfa_1(int pos, long active0,
        long active1, long active2)
      {
        switch (pos)
          {
        case 0:

            if (((active1 & 0x80000000000000L) != 0L) ||
                    ((active2 & 0x8000L) != 0L))
              {
                return 4;
              }

            if ((active0 & 0x200000000000000L) != 0L)
              {
                jjmatchedKind = 102;

                return 46;
              }

            if (((active0 & 0x6000000000000L) != 0L) ||
                    ((active1 & 0x4c0002L) != 0L))
              {
                jjmatchedKind = 102;

                return 55;
              }

            if ((active1 & 0x140000000L) != 0L)
              {
                jjmatchedKind = 102;

                return 20;
              }

            if (((active0 & 0x40000000000000L) != 0L) ||
                    ((active1 & 0x20000L) != 0L))
              {
                jjmatchedKind = 102;

                return 36;
              }

            if ((active1 & 0x2000080L) != 0L)
              {
                jjmatchedKind = 102;

                return 16;
              }

            if (((active0 & 0xa000000000000000L) != 0L) ||
                    ((active1 & 0x10100L) != 0L))
              {
                jjmatchedKind = 102;

                return 92;
              }

            if ((active0 & 0x401800000000000L) != 0L)
              {
                jjmatchedKind = 102;

                return 30;
              }

            if (((active1 & 0x40000000000000L) != 0L) ||
                    ((active2 & 0x20000L) != 0L))
              {
                return 78;
              }

            if ((active0 & 0x908000000000000L) != 0L)
              {
                jjmatchedKind = 102;

                return 26;
              }

            if (((active0 & 0x50b0000000000000L) != 0L) ||
                    ((active1 & 0x81b0fe7dL) != 0L))
              {
                jjmatchedKind = 102;

                return 39;
              }

            return -1;

        case 1:

            if ((active0 & 0x800000000000000L) != 0L)
              {
                return 25;
              }

            if ((active1 & 0x40000000L) != 0L)
              {
                if (jjmatchedPos != 1)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 1;
                  }

                return 19;
              }

            if ((active0 & 0x401800000000000L) != 0L)
              {
                if (jjmatchedPos != 1)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 1;
                  }

                return 29;
              }

            if (((active0 & 0xb3f8000000000000L) != 0L) ||
                    ((active1 & 0x183b9ffddL) != 0L))
              {
                if (jjmatchedPos != 1)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 1;
                  }

                return 39;
              }

            if (((active0 & 0x4000000000000000L) != 0L) ||
                    ((active1 & 0x22L) != 0L))
              {
                return 39;
              }

            if ((active1 & 0x20000L) != 0L)
              {
                if (jjmatchedPos != 1)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 1;
                  }

                return 35;
              }

            if (((active0 & 0x6000000000000L) != 0L) ||
                    ((active1 & 0x440000L) != 0L))
              {
                if (jjmatchedPos != 1)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 1;
                  }

                return 54;
              }

            return -1;

        case 2:

            if (((active0 & 0x17ff800000000000L) != 0L) ||
                    ((active1 & 0x181fbf70dL) != 0L))
              {
                if (jjmatchedPos != 2)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 2;
                  }

                return 39;
              }

            if ((active1 & 0x40000L) != 0L)
              {
                if (jjmatchedPos != 2)
                  {
                    jjmatchedKind = 101;
                    jjmatchedPos = 2;
                  }

                return 53;
              }

            if (((active0 & 0xa000000000000000L) != 0L) ||
                    ((active1 & 0x420008d0L) != 0L))
              {
                return 39;
              }

            return -1;

        case 3:

            if (((active0 & 0x376f800000000000L) != 0L) ||
                    ((active1 & 0x181fbf701L) != 0L))
              {
                if (jjmatchedPos != 3)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 3;
                  }

                return 39;
              }

            if ((active1 & 0x40000L) != 0L)
              {
                if (jjmatchedPos != 3)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 3;
                  }

                return 52;
              }

            if (((active0 & 0x90000000000000L) != 0L) ||
                    ((active1 & 0xcL) != 0L))
              {
                return 39;
              }

            return -1;

        case 4:

            if (((active0 & 0x254f800000000000L) != 0L) ||
                    ((active1 & 0xcef509L) != 0L))
              {
                jjmatchedKind = 102;
                jjmatchedPos = 4;

                return 39;
              }

            if (((active0 & 0x1220000000000000L) != 0L) ||
                    ((active1 & 0x181310200L) != 0L))
              {
                return 39;
              }

            return -1;

        case 5:

            if (((active0 & 0x448000000000000L) != 0L) ||
                    ((active1 & 0x821008L) != 0L))
              {
                return 39;
              }

            if (((active0 & 0x2107800000000000L) != 0L) ||
                    ((active1 & 0x4ce501L) != 0L))
              {
                jjmatchedKind = 102;
                jjmatchedPos = 5;

                return 39;
              }

            return -1;

        case 6:

            if ((active1 & 0x4cc101L) != 0L)
              {
                if (jjmatchedPos != 6)
                  {
                    jjmatchedKind = 102;
                    jjmatchedPos = 6;
                  }

                return 39;
              }

            if (((active0 & 0x2107800000000000L) != 0L) ||
                    ((active1 & 0x2400L) != 0L))
              {
                return 39;
              }

            return -1;

        case 7:

            if (((active0 & 0x2800000000000L) != 0L) ||
                    ((active1 & 0x4c4000L) != 0L))
              {
                jjmatchedKind = 102;
                jjmatchedPos = 7;

                return 39;
              }

            if ((active1 & 0x8101L) != 0L)
              {
                return 39;
              }

            return -1;

        case 8:

            if ((active1 & 0x44000L) != 0L)
              {
                return 39;
              }

            if (((active0 & 0x2800000000000L) != 0L) ||
                    ((active1 & 0x480000L) != 0L))
              {
                jjmatchedKind = 102;
                jjmatchedPos = 8;

                return 39;
              }

            return -1;

        case 9:

            if ((active0 & 0x2800000000000L) != 0L)
              {
                jjmatchedKind = 102;
                jjmatchedPos = 9;

                return 39;
              }

            if ((active1 & 0x480000L) != 0L)
              {
                return 39;
              }

            return -1;

        case 10:

            if ((active0 & 0x2800000000000L) != 0L)
              {
                jjmatchedKind = 102;
                jjmatchedPos = 10;

                return 39;
              }

            return -1;

        default:
            return -1;
          }
      }

    private final int jjStartNfa_1(int pos, long active0, long active1,
        long active2)
      {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1,
                active2), pos + 1);
      }

    private final int jjStartNfaWithStates_1(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_1(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_1()
      {
        switch (curChar)
          {
        case 33:
            jjmatchedKind = 148;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x50L);

        case 34:
            return jjStopAtPos(0, 15);

        case 36:
            return jjStopAtPos(0, 92);

        case 37:
            jjmatchedKind = 146;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000000000L, 0x0L);

        case 38:
            jjmatchedKind = 112;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x200000000000000L, 0x1L);

        case 39:
            return jjStopAtPos(0, 16);

        case 40:
            return jjStopAtPos(0, 105);

        case 41:
            return jjStopAtPos(0, 106);

        case 42:
            jjmatchedKind = 144;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x20000000000000L, 0x0L);

        case 43:
            jjmatchedKind = 141;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000000000L, 0x200000L);

        case 44:
            return jjStopAtPos(0, 107);

        case 45:
            jjmatchedKind = 142;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000000L, 0xc00000L);

        case 46:
            jjmatchedKind = 143;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000000000L, 0x0L);

        case 47:
            jjmatchedKind = 145;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x40000000000000L, 0x0L);

        case 58:
            jjmatchedKind = 108;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x1000000L);

        case 59:
            return jjStopAtPos(0, 93);

        case 60:
            jjmatchedKind = 135;

            return jjMoveStringLiteralDfa1_1(0x20000L, 0x1000000000000000L,
                0xa00L);

        case 61:
            jjmatchedKind = 113;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x800000000000L, 0x28L);

        case 62:
            jjmatchedKind = 136;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x2000000000000000L, 0x1400L);

        case 63:
            jjmatchedKind = 126;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000L, 0x0L);

        case 64:
            return jjStopAtPos(0, 114);

        case 91:
            return jjStopAtPos(0, 153);

        case 93:
            return jjStopAtPos(0, 154);

        case 94:
            jjmatchedKind = 130;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x800000000000000L, 0x0L);

        case 97:
            return jjMoveStringLiteralDfa1_1(0x4000000000000000L, 0x1008010L,
                0x0L);

        case 98:
            return jjMoveStringLiteralDfa1_1(0x200000000000000L, 0x0L, 0x0L);

        case 99:
            return jjMoveStringLiteralDfa1_1(0x80000000000000L, 0x80300201L,
                0x0L);

        case 100:
            return jjMoveStringLiteralDfa1_1(0x908000000000000L, 0x0L, 0x0L);

        case 101:
            return jjMoveStringLiteralDfa1_1(0x10000000000000L, 0x40cL, 0x0L);

        case 102:
            return jjMoveStringLiteralDfa1_1(0xa000000000000000L, 0x10100L, 0x0L);

        case 103:
            return jjMoveStringLiteralDfa1_1(0x0L, 0x800000L, 0x0L);

        case 105:
            return jjMoveStringLiteralDfa1_1(0x6000000000000L, 0x4c0002L, 0x0L);

        case 110:
            return jjMoveStringLiteralDfa1_1(0x0L, 0x2000080L, 0x0L);

        case 111:
            return jjMoveStringLiteralDfa1_1(0x0L, 0x20L, 0x0L);

        case 112:
            return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x7000L, 0x0L);

        case 114:
            return jjMoveStringLiteralDfa1_1(0x401800000000000L, 0x0L, 0x0L);

        case 115:
            return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x20000L, 0x0L);

        case 116:
            return jjMoveStringLiteralDfa1_1(0x0L, 0x140000000L, 0x0L);

        case 118:
            return jjMoveStringLiteralDfa1_1(0x0L, 0x800L, 0x0L);

        case 119:
            return jjMoveStringLiteralDfa1_1(0x1000000000000000L, 0x0L, 0x0L);

        case 120:
            return jjMoveStringLiteralDfa1_1(0x0L, 0x40L, 0x0L);

        case 123:
            return jjStopAtPos(0, 109);

        case 124:
            jjmatchedKind = 129;

            return jjMoveStringLiteralDfa1_1(0x0L, 0x8400000000000000L, 0x0L);

        case 125:
            return jjStopAtPos(0, 110);

        case 126:
            return jjStopAtPos(0, 147);

        default:
            return jjMoveNfa_1(0, 0);
          }
      }

    private final int jjMoveStringLiteralDfa1_1(long active0, long active1,
        long active2)
      {
        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(0, active0, active1, active2);

            return 1;
          }

        switch (curChar)
          {
        case 38:

            if ((active2 & 0x1L) != 0L)
              {
                return jjStopAtPos(1, 128);
              }

            break;

        case 43:

            if ((active2 & 0x200000L) != 0L)
              {
                return jjStopAtPos(1, 149);
              }

            break;

        case 45:

            if ((active2 & 0x400000L) != 0L)
              {
                return jjStopAtPos(1, 150);
              }

            break;

        case 58:

            if ((active2 & 0x1000000L) != 0L)
              {
                return jjStopAtPos(1, 152);
              }

            break;

        case 60:

            if ((active2 & 0x800L) != 0L)
              {
                jjmatchedKind = 139;
                jjmatchedPos = 1;
              }

            return jjMoveStringLiteralDfa2_1(active0, 0x20000L, active1,
                0x1000000000000000L, active2, 0L);

        case 61:

            if ((active1 & 0x8000000000000L) != 0L)
              {
                return jjStopAtPos(1, 115);
              }
            else if ((active1 & 0x10000000000000L) != 0L)
              {
                return jjStopAtPos(1, 116);
              }
            else if ((active1 & 0x20000000000000L) != 0L)
              {
                return jjStopAtPos(1, 117);
              }
            else if ((active1 & 0x40000000000000L) != 0L)
              {
                return jjStopAtPos(1, 118);
              }
            else if ((active1 & 0x80000000000000L) != 0L)
              {
                return jjStopAtPos(1, 119);
              }
            else if ((active1 & 0x100000000000000L) != 0L)
              {
                return jjStopAtPos(1, 120);
              }
            else if ((active1 & 0x200000000000000L) != 0L)
              {
                return jjStopAtPos(1, 121);
              }
            else if ((active1 & 0x400000000000000L) != 0L)
              {
                return jjStopAtPos(1, 122);
              }
            else if ((active1 & 0x800000000000000L) != 0L)
              {
                return jjStopAtPos(1, 123);
              }
            else if ((active2 & 0x8L) != 0L)
              {
                jjmatchedKind = 131;
                jjmatchedPos = 1;
              }
            else if ((active2 & 0x10L) != 0L)
              {
                jjmatchedKind = 132;
                jjmatchedPos = 1;
              }
            else if ((active2 & 0x200L) != 0L)
              {
                return jjStopAtPos(1, 137);
              }
            else if ((active2 & 0x400L) != 0L)
              {
                return jjStopAtPos(1, 138);
              }

            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2,
                0x60L);

        case 62:

            if ((active1 & 0x8000000L) != 0L)
              {
                return jjStopAtPos(1, 91);
              }
            else if ((active1 & 0x800000000000L) != 0L)
              {
                return jjStopAtPos(1, 111);
              }
            else if ((active2 & 0x1000L) != 0L)
              {
                jjmatchedKind = 140;
                jjmatchedPos = 1;
              }
            else if ((active2 & 0x800000L) != 0L)
              {
                return jjStopAtPos(1, 151);
              }

            return jjMoveStringLiteralDfa2_1(active0, 0L, active1,
                0x2000000000000000L, active2, 0L);

        case 97:
            return jjMoveStringLiteralDfa2_1(active0, 0x80000000000000L,
                active1, 0x80000800L, active2, 0L);

        case 98:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8000L,
                active2, 0L);

        case 99:
            return jjMoveStringLiteralDfa2_1(active0, 0x10000000000000L,
                active1, 0L, active2, 0L);

        case 101:
            return jjMoveStringLiteralDfa2_1(active0, 0x509800000000000L,
                active1, 0x2000000L, active2, 0L);

        case 102:

            if ((active1 & 0x2L) != 0L)
              {
                return jjStartNfaWithStates_1(1, 65, 39);
              }

            break;

        case 104:
            return jjMoveStringLiteralDfa2_1(active0, 0x1000000000000000L,
                active1, 0x100000000L, active2, 0L);

        case 105:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x10000L,
                active2, 0L);

        case 108:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0xa0020cL,
                active2, 0L);

        case 109:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80000L,
                active2, 0L);

        case 110:
            return jjMoveStringLiteralDfa2_1(active0, 0x6000000000000L,
                active1, 0x440010L, active2, 0L);

        case 111:

            if ((active0 & 0x800000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(1, 59, 25);
              }

            return jjMoveStringLiteralDfa2_1(active0, 0xa000000000000000L,
                active1, 0x1000c1L, active2, 0L);

        case 114:

            if ((active1 & 0x20L) != 0L)
              {
                return jjStartNfaWithStates_1(1, 69, 39);
              }

            return jjMoveStringLiteralDfa2_1(active0, 0x220000000000000L,
                active1, 0x41006000L, active2, 0L);

        case 115:

            if ((active0 & 0x4000000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(1, 62, 39);
              }

            break;

        case 116:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20000L,
                active2, 0L);

        case 117:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1100L,
                active2, 0L);

        case 119:
            return jjMoveStringLiteralDfa2_1(active0, 0x40000000000000L,
                active1, 0L, active2, 0L);

        case 120:
            return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x400L,
                active2, 0L);

        case 124:

            if ((active1 & 0x8000000000000000L) != 0L)
              {
                return jjStopAtPos(1, 127);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_1(0, active0, active1, active2);
      }

    private final int jjMoveStringLiteralDfa2_1(long old0, long active0,
        long old1, long active1, long old2, long active2)
      {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
          {
            return jjStartNfa_1(0, old0, old1, old2);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(1, active0, active1, active2);

            return 2;
          }

        switch (curChar)
          {
        case 60:

            if ((active0 & 0x20000L) != 0L)
              {
                return jjStopAtPos(2, 17);
              }

            break;

        case 61:

            if ((active1 & 0x1000000000000000L) != 0L)
              {
                return jjStopAtPos(2, 124);
              }
            else if ((active1 & 0x2000000000000000L) != 0L)
              {
                return jjStopAtPos(2, 125);
              }
            else if ((active2 & 0x20L) != 0L)
              {
                return jjStopAtPos(2, 133);
              }
            else if ((active2 & 0x40L) != 0L)
              {
                return jjStopAtPos(2, 134);
              }

            break;

        case 97:
            return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x20200L,
                active2, 0L);

        case 98:
            return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1000L,
                active2, 0L);

        case 99:
            return jjMoveStringLiteralDfa3_1(active0, 0x6000000000000L,
                active1, 0L, active2, 0L);

        case 100:

            if ((active1 & 0x10L) != 0L)
              {
                return jjStartNfaWithStates_1(2, 68, 39);
              }

            break;

        case 101:
            return jjMoveStringLiteralDfa3_1(active0, 0x200000000000000L,
                active1, 0L, active2, 0L);

        case 102:
            return jjMoveStringLiteralDfa3_1(active0, 0x108000000000000L,
                active1, 0L, active2, 0L);

        case 104:
            return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L,
                active1, 0L, active2, 0L);

        case 105:
            return jjMoveStringLiteralDfa3_1(active0, 0x1060000000000000L,
                active1, 0x2000L, active2, 0L);

        case 110:
            return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x110101L,
                active2, 0L);

        case 111:
            return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0xa04000L,
                active2, 0L);

        case 112:
            return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80000L,
                active2, 0L);

        case 113:
            return jjMoveStringLiteralDfa3_1(active0, 0x1800000000000L,
                active1, 0L, active2, 0L);

        case 114:

            if ((active0 & 0x8000000000000000L) != 0L)
              {
                jjmatchedKind = 63;
                jjmatchedPos = 2;
              }
            else if ((active1 & 0x40L) != 0L)
              {
                return jjStartNfaWithStates_1(2, 70, 39);
              }
            else if ((active1 & 0x800L) != 0L)
              {
                return jjStartNfaWithStates_1(2, 75, 39);
              }

            return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L,
                active1, 0x101000000L, active2, 0L);

        case 115:
            return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L,
                active1, 0x40800cL, active2, 0L);

        case 116:

            if ((active1 & 0x80L) != 0L)
              {
                return jjStartNfaWithStates_1(2, 71, 39);
              }

            return jjMoveStringLiteralDfa3_1(active0, 0x400000000000000L,
                active1, 0x80040400L, active2, 0L);

        case 119:

            if ((active1 & 0x2000000L) != 0L)
              {
                return jjStartNfaWithStates_1(2, 89, 39);
              }

            break;

        case 121:

            if ((active1 & 0x40000000L) != 0L)
              {
                return jjStartNfaWithStates_1(2, 94, 39);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_1(1, active0, active1, active2);
      }

    private final int jjMoveStringLiteralDfa3_1(long old0, long active0,
        long old1, long active1, long old2, long active2)
      {
        if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
          {
            return jjStartNfa_1(1, old0, old1, old2);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(2, active0, active1, 0L);

            return 3;
          }

        switch (curChar)
          {
        case 97:
            return jjMoveStringLiteralDfa4_1(active0, 0x300000000000000L,
                active1, 0x1010000L);

        case 98:
            return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x800000L);

        case 99:
            return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x80000100L);

        case 101:

            if ((active0 & 0x80000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(3, 55, 39);
              }
            else if ((active1 & 0x4L) != 0L)
              {
                jjmatchedKind = 66;
                jjmatchedPos = 3;
              }

            return jjMoveStringLiteralDfa4_1(active0, 0x2000000000000000L,
                active1, 0x40408L);

        case 105:
            return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000L,
                active1, 0L);

        case 108:
            return jjMoveStringLiteralDfa4_1(active0, 0x1006000000000000L,
                active1, 0x81000L);

        case 110:
            return jjMoveStringLiteralDfa4_1(active0, 0x20000000000000L,
                active1, 0x200000L);

        case 111:

            if ((active0 & 0x10000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(3, 52, 39);
              }

            return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100000000L);

        case 115:
            return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100200L);

        case 116:
            return jjMoveStringLiteralDfa4_1(active0, 0x40000000000000L,
                active1, 0x42c001L);

        case 117:
            return jjMoveStringLiteralDfa4_1(active0, 0x401800000000000L,
                active1, 0L);

        case 118:
            return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x2000L);

        default:
            break;
          }

        return jjStartNfa_1(2, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa4_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(2, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(3, active0, active1, 0L);

            return 4;
          }

        switch (curChar)
          {
        case 97:
            return jjMoveStringLiteralDfa5_1(active0, 0x2000000000000000L,
                active1, 0xc02000L);

        case 99:
            return jjMoveStringLiteralDfa5_1(active0, 0x40000000000000L,
                active1, 0L);

        case 101:

            if ((active0 & 0x1000000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 60, 39);
              }
            else if ((active1 & 0x200000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 85, 39);
              }

            return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x84000L);

        case 104:

            if ((active1 & 0x80000000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 95, 39);
              }

            break;

        case 105:
            return jjMoveStringLiteralDfa5_1(active0, 0x1800000000000L,
                active1, 0x21009L);

        case 107:

            if ((active0 & 0x200000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 57, 39);
              }

            break;

        case 108:

            if ((active1 & 0x10000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 80, 39);
              }

            break;

        case 110:
            return jjMoveStringLiteralDfa5_1(active0, 0x8000000000000L,
                active1, 0x400L);

        case 114:
            return jjMoveStringLiteralDfa5_1(active0, 0x400000000000000L,
                active1, 0x48000L);

        case 115:

            if ((active1 & 0x200L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 73, 39);
              }

            break;

        case 116:

            if ((active0 & 0x20000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 53, 39);
              }
            else if ((active1 & 0x100000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 84, 39);
              }

            return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x100L);

        case 117:
            return jjMoveStringLiteralDfa5_1(active0, 0x106000000000000L,
                active1, 0L);

        case 119:

            if ((active1 & 0x100000000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 96, 39);
              }

            break;

        case 121:

            if ((active1 & 0x1000000L) != 0L)
              {
                return jjStartNfaWithStates_1(4, 88, 39);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_1(3, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa5_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(3, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(4, active0, active1, 0L);

            return 5;
          }

        switch (curChar)
          {
        case 97:
            return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x8000L);

        case 99:

            if ((active1 & 0x1000L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 76, 39);
              }
            else if ((active1 & 0x20000L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 81, 39);
              }

            return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000000L,
                active1, 0x4000L);

        case 100:
            return jjMoveStringLiteralDfa6_1(active0, 0x6000000000000L,
                active1, 0x400L);

        case 101:

            if ((active0 & 0x8000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 51, 39);
              }

            break;

        case 102:

            if ((active1 & 0x8L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 67, 39);
              }

            return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x40000L);

        case 104:

            if ((active0 & 0x40000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 54, 39);
              }

            break;

        case 105:
            return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x100L);

        case 108:

            if ((active1 & 0x800000L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 87, 39);
              }

            return jjMoveStringLiteralDfa6_1(active0, 0x100000000000000L,
                active1, 0L);

        case 109:
            return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x80000L);

        case 110:

            if ((active0 & 0x400000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(5, 58, 39);
              }

            return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x400001L);

        case 114:
            return jjMoveStringLiteralDfa6_1(active0, 0x1800000000000L,
                active1, 0L);

        case 116:
            return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x2000L);

        default:
            break;
          }

        return jjStartNfa_1(4, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa6_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(4, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(5, active0, active1, 0L);

            return 6;
          }

        switch (curChar)
          {
        case 97:
            return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x40000L);

        case 99:
            return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x408000L);

        case 101:

            if ((active0 & 0x1000000000000L) != 0L)
              {
                jjmatchedKind = 48;
                jjmatchedPos = 6;
              }
            else if ((active0 & 0x4000000000000L) != 0L)
              {
                jjmatchedKind = 50;
                jjmatchedPos = 6;
              }
            else if ((active1 & 0x2000L) != 0L)
              {
                return jjStartNfaWithStates_1(6, 77, 39);
              }

            return jjMoveStringLiteralDfa7_1(active0, 0x2800000000000L,
                active1, 0x80000L);

        case 104:

            if ((active0 & 0x2000000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(6, 61, 39);
              }

            break;

        case 111:
            return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x100L);

        case 115:

            if ((active1 & 0x400L) != 0L)
              {
                return jjStartNfaWithStates_1(6, 74, 39);
              }

            break;

        case 116:

            if ((active0 & 0x100000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(6, 56, 39);
              }

            return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x4000L);

        case 117:
            return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1L);

        default:
            break;
          }

        return jjStartNfa_1(5, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa7_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(5, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(6, active0, active1, 0L);

            return 7;
          }

        switch (curChar)
          {
        case 95:
            return jjMoveStringLiteralDfa8_1(active0, 0x2800000000000L,
                active1, 0L);

        case 99:
            return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x40000L);

        case 101:

            if ((active1 & 0x1L) != 0L)
              {
                return jjStartNfaWithStates_1(7, 64, 39);
              }

            return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x404000L);

        case 110:

            if ((active1 & 0x100L) != 0L)
              {
                return jjStartNfaWithStates_1(7, 72, 39);
              }

            return jjMoveStringLiteralDfa8_1(active0, 0L, active1, 0x80000L);

        case 116:

            if ((active1 & 0x8000L) != 0L)
              {
                return jjStartNfaWithStates_1(7, 79, 39);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_1(6, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa8_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(6, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(7, active0, active1, 0L);

            return 8;
          }

        switch (curChar)
          {
        case 100:

            if ((active1 & 0x4000L) != 0L)
              {
                return jjStartNfaWithStates_1(8, 78, 39);
              }

            break;

        case 101:

            if ((active1 & 0x40000L) != 0L)
              {
                return jjStartNfaWithStates_1(8, 82, 39);
              }

            break;

        case 111:
            return jjMoveStringLiteralDfa9_1(active0, 0x2800000000000L,
                active1, 0x400000L);

        case 116:
            return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x80000L);

        default:
            break;
          }

        return jjStartNfa_1(7, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa9_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(7, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(8, active0, active1, 0L);

            return 9;
          }

        switch (curChar)
          {
        case 102:

            if ((active1 & 0x400000L) != 0L)
              {
                return jjStartNfaWithStates_1(9, 86, 39);
              }

            break;

        case 110:
            return jjMoveStringLiteralDfa10_1(active0, 0x2800000000000L,
                active1, 0L);

        case 115:

            if ((active1 & 0x80000L) != 0L)
              {
                return jjStartNfaWithStates_1(9, 83, 39);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_1(8, active0, active1, 0L);
      }

    private final int jjMoveStringLiteralDfa10_1(long old0, long active0,
        long old1, long active1)
      {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
          {
            return jjStartNfa_1(8, old0, old1, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(9, active0, 0L, 0L);

            return 10;
          }

        switch (curChar)
          {
        case 99:
            return jjMoveStringLiteralDfa11_1(active0, 0x2800000000000L);

        default:
            break;
          }

        return jjStartNfa_1(9, active0, 0L, 0L);
      }

    private final int jjMoveStringLiteralDfa11_1(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_1(9, old0, 0L, 0L);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_1(10, active0, 0L, 0L);

            return 11;
          }

        switch (curChar)
          {
        case 101:

            if ((active0 & 0x800000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(11, 47, 39);
              }
            else if ((active0 & 0x2000000000000L) != 0L)
              {
                return jjStartNfaWithStates_1(11, 49, 39);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_1(10, active0, 0L, 0L);
      }

    private final int jjMoveNfa_1(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 96;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 55:
                    case 39:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 29:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 54:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 20:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 36:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 52:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 92:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 16:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 25:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 0:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjCheckNAddStates(0, 6);
                          }
                        else if (curChar == 47)
                          {
                            jjAddStates(7, 8);
                          }
                        else if (curChar == 35)
                          {
                            jjCheckNAddStates(9, 11);
                          }
                        else if (curChar == 46)
                          {
                            jjCheckNAdd(4);
                          }

                        if ((0x3fe000000000000L & l) != 0L)
                          {
                            if (kind > 9)
                              {
                                kind = 9;
                              }

                            jjCheckNAddTwoStates(1, 2);
                          }
                        else if (curChar == 48)
                          {
                            if (kind > 9)
                              {
                                kind = 9;
                              }

                            jjCheckNAddStates(12, 14);
                          }

                        break;

                    case 19:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 35:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 30:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 53:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 26:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 78:

                        if (curChar == 42)
                          {
                            jjCheckNAddTwoStates(84, 85);
                          }
                        else if (curChar == 47)
                          {
                            jjCheckNAddStates(15, 17);
                          }

                        break;

                    case 46:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 1:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddTwoStates(1, 2);

                        break;

                    case 3:

                        if (curChar == 46)
                          {
                            jjCheckNAdd(4);
                          }

                        break;

                    case 4:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 13)
                          {
                            kind = 13;
                          }

                        jjCheckNAddStates(18, 20);

                        break;

                    case 6:

                        if ((0x280000000000L & l) != 0L)
                          {
                            jjCheckNAdd(7);
                          }

                        break;

                    case 7:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 13)
                          {
                            kind = 13;
                          }

                        jjCheckNAddTwoStates(7, 8);

                        break;

                    case 9:

                        if (curChar == 35)
                          {
                            jjCheckNAddStates(9, 11);
                          }

                        break;

                    case 10:

                        if ((0xffffffffffffdbffL & l) != 0L)
                          {
                            jjCheckNAddStates(9, 11);
                          }

                        break;

                    case 11:

                        if (((0x2400L & l) != 0L) && (kind > 19))
                          {
                            kind = 19;
                          }

                        break;

                    case 12:

                        if ((curChar == 10) && (kind > 19))
                          {
                            kind = 19;
                          }

                        break;

                    case 13:

                        if (curChar == 13)
                          {
                            jjstateSet[jjnewStateCnt++] = 12;
                          }

                        break;

                    case 58:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjCheckNAddStates(0, 6);
                          }

                        break;

                    case 59:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjCheckNAddTwoStates(59, 60);
                          }

                        break;

                    case 60:

                        if (curChar != 46)
                          {
                            break;
                          }

                        if (kind > 13)
                          {
                            kind = 13;
                          }

                        jjCheckNAddStates(21, 23);

                        break;

                    case 61:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 13)
                          {
                            kind = 13;
                          }

                        jjCheckNAddStates(21, 23);

                        break;

                    case 63:

                        if ((0x280000000000L & l) != 0L)
                          {
                            jjCheckNAdd(64);
                          }

                        break;

                    case 64:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 13)
                          {
                            kind = 13;
                          }

                        jjCheckNAddTwoStates(64, 8);

                        break;

                    case 65:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjCheckNAddTwoStates(65, 66);
                          }

                        break;

                    case 67:

                        if ((0x280000000000L & l) != 0L)
                          {
                            jjCheckNAdd(68);
                          }

                        break;

                    case 68:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 13)
                          {
                            kind = 13;
                          }

                        jjCheckNAddTwoStates(68, 8);

                        break;

                    case 69:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjCheckNAddStates(24, 26);
                          }

                        break;

                    case 71:

                        if ((0x280000000000L & l) != 0L)
                          {
                            jjCheckNAdd(72);
                          }

                        break;

                    case 72:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjCheckNAddTwoStates(72, 8);
                          }

                        break;

                    case 73:

                        if (curChar != 48)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddStates(12, 14);

                        break;

                    case 75:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddTwoStates(75, 2);

                        break;

                    case 76:

                        if ((0xff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddTwoStates(76, 2);

                        break;

                    case 77:

                        if (curChar == 47)
                          {
                            jjAddStates(7, 8);
                          }

                        break;

                    case 79:

                        if ((0xffffffffffffdbffL & l) != 0L)
                          {
                            jjCheckNAddStates(15, 17);
                          }

                        break;

                    case 80:

                        if (((0x2400L & l) != 0L) && (kind > 18))
                          {
                            kind = 18;
                          }

                        break;

                    case 81:

                        if ((curChar == 10) && (kind > 18))
                          {
                            kind = 18;
                          }

                        break;

                    case 82:

                        if (curChar == 13)
                          {
                            jjstateSet[jjnewStateCnt++] = 81;
                          }

                        break;

                    case 83:

                        if (curChar == 42)
                          {
                            jjCheckNAddTwoStates(84, 85);
                          }

                        break;

                    case 84:

                        if ((0xfffffbffffffffffL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(84, 85);
                          }

                        break;

                    case 85:

                        if (curChar == 42)
                          {
                            jjCheckNAddStates(27, 29);
                          }

                        break;

                    case 86:

                        if ((0xffff7bffffffffffL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(87, 85);
                          }

                        break;

                    case 87:

                        if ((0xfffffbffffffffffL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(87, 85);
                          }

                        break;

                    case 88:

                        if ((curChar == 47) && (kind > 20))
                          {
                            kind = 20;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 55:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 110)
                          {
                            jjCheckNAdd(56);
                          }

                        if (curChar == 110)
                          {
                            jjstateSet[jjnewStateCnt++] = 54;
                          }

                        break;

                    case 29:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 97)
                          {
                            jjCheckNAdd(28);
                          }

                        break;

                    case 54:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 116)
                          {
                            if (kind > 101)
                              {
                                kind = 101;
                              }
                          }

                        if (curChar == 116)
                          {
                            jjstateSet[jjnewStateCnt++] = 53;
                          }

                        break;

                    case 20:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 114)
                          {
                            jjstateSet[jjnewStateCnt++] = 19;
                          }

                        break;

                    case 36:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 116)
                          {
                            jjstateSet[jjnewStateCnt++] = 35;
                          }

                        break;

                    case 52:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 103)
                          {
                            jjstateSet[jjnewStateCnt++] = 51;
                          }

                        break;

                    case 92:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 108)
                          {
                            jjstateSet[jjnewStateCnt++] = 94;
                          }
                        else if (curChar == 97)
                          {
                            jjstateSet[jjnewStateCnt++] = 91;
                          }

                        break;

                    case 16:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 117)
                          {
                            jjstateSet[jjnewStateCnt++] = 15;
                          }

                        break;

                    case 25:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 117)
                          {
                            jjstateSet[jjnewStateCnt++] = 24;
                          }

                        break;

                    case 0:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 102)
                          {
                            jjAddStates(30, 31);
                          }
                        else if (curChar == 105)
                          {
                            jjAddStates(32, 33);
                          }
                        else if (curChar == 98)
                          {
                            jjAddStates(34, 35);
                          }
                        else if (curChar == 115)
                          {
                            jjstateSet[jjnewStateCnt++] = 36;
                          }
                        else if (curChar == 114)
                          {
                            jjstateSet[jjnewStateCnt++] = 30;
                          }
                        else if (curChar == 100)
                          {
                            jjstateSet[jjnewStateCnt++] = 26;
                          }
                        else if (curChar == 116)
                          {
                            jjstateSet[jjnewStateCnt++] = 20;
                          }
                        else if (curChar == 110)
                          {
                            jjstateSet[jjnewStateCnt++] = 16;
                          }

                        break;

                    case 19:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 117)
                          {
                            jjCheckNAdd(18);
                          }

                        break;

                    case 35:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 114)
                          {
                            jjstateSet[jjnewStateCnt++] = 34;
                          }

                        break;

                    case 30:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 101)
                          {
                            jjstateSet[jjnewStateCnt++] = 29;
                          }

                        break;

                    case 53:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 101)
                          {
                            jjstateSet[jjnewStateCnt++] = 52;
                          }

                        break;

                    case 26:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 111)
                          {
                            jjstateSet[jjnewStateCnt++] = 25;
                          }

                        break;

                    case 46:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 102)
                              {
                                kind = 102;
                              }

                            jjCheckNAdd(39);
                          }

                        if (curChar == 111)
                          {
                            jjstateSet[jjnewStateCnt++] = 47;
                          }

                        if (curChar == 111)
                          {
                            jjstateSet[jjnewStateCnt++] = 45;
                          }

                        break;

                    case 2:

                        if (((0x100000001000L & l) != 0L) && (kind > 9))
                          {
                            kind = 9;
                          }

                        break;

                    case 5:

                        if ((0x2000000020L & l) != 0L)
                          {
                            jjAddStates(36, 37);
                          }

                        break;

                    case 8:

                        if (((0x5000000050L & l) != 0L) && (kind > 13))
                          {
                            kind = 13;
                          }

                        break;

                    case 10:
                        jjAddStates(9, 11);

                        break;

                    case 14:

                        if ((curChar == 108) && (kind > 90))
                          {
                            kind = 90;
                          }

                        break;

                    case 15:

                        if (curChar == 108)
                          {
                            jjstateSet[jjnewStateCnt++] = 14;
                          }

                        break;

                    case 17:

                        if (curChar == 110)
                          {
                            jjstateSet[jjnewStateCnt++] = 16;
                          }

                        break;

                    case 18:

                        if ((curChar == 101) && (kind > 90))
                          {
                            kind = 90;
                          }

                        break;

                    case 21:

                        if (curChar == 116)
                          {
                            jjstateSet[jjnewStateCnt++] = 20;
                          }

                        break;

                    case 22:

                        if ((curChar == 101) && (kind > 101))
                          {
                            kind = 101;
                          }

                        break;

                    case 23:

                        if (curChar == 108)
                          {
                            jjstateSet[jjnewStateCnt++] = 22;
                          }

                        break;

                    case 24:

                        if (curChar == 98)
                          {
                            jjstateSet[jjnewStateCnt++] = 23;
                          }

                        break;

                    case 27:

                        if (curChar == 100)
                          {
                            jjstateSet[jjnewStateCnt++] = 26;
                          }

                        break;

                    case 28:

                        if ((curChar == 108) && (kind > 101))
                          {
                            kind = 101;
                          }

                        break;

                    case 31:

                        if (curChar == 114)
                          {
                            jjstateSet[jjnewStateCnt++] = 30;
                          }

                        break;

                    case 32:

                        if ((curChar == 103) && (kind > 101))
                          {
                            kind = 101;
                          }

                        break;

                    case 33:

                        if (curChar == 110)
                          {
                            jjstateSet[jjnewStateCnt++] = 32;
                          }

                        break;

                    case 34:

                        if (curChar == 105)
                          {
                            jjstateSet[jjnewStateCnt++] = 33;
                          }

                        break;

                    case 37:

                        if (curChar == 115)
                          {
                            jjstateSet[jjnewStateCnt++] = 36;
                          }

                        break;

                    case 38:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 39:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 102)
                          {
                            kind = 102;
                          }

                        jjCheckNAdd(39);

                        break;

                    case 40:

                        if (curChar == 98)
                          {
                            jjAddStates(34, 35);
                          }

                        break;

                    case 41:

                        if ((curChar == 110) && (kind > 101))
                          {
                            kind = 101;
                          }

                        break;

                    case 42:

                        if (curChar == 97)
                          {
                            jjstateSet[jjnewStateCnt++] = 41;
                          }

                        break;

                    case 43:

                        if (curChar == 101)
                          {
                            jjstateSet[jjnewStateCnt++] = 42;
                          }

                        break;

                    case 44:

                        if (curChar == 108)
                          {
                            jjstateSet[jjnewStateCnt++] = 43;
                          }

                        break;

                    case 45:

                        if (curChar == 111)
                          {
                            jjstateSet[jjnewStateCnt++] = 44;
                          }

                        break;

                    case 47:

                        if (curChar == 111)
                          {
                            jjCheckNAdd(28);
                          }

                        break;

                    case 48:

                        if (curChar == 111)
                          {
                            jjstateSet[jjnewStateCnt++] = 47;
                          }

                        break;

                    case 49:

                        if (curChar == 105)
                          {
                            jjAddStates(32, 33);
                          }

                        break;

                    case 50:

                        if ((curChar == 114) && (kind > 101))
                          {
                            kind = 101;
                          }

                        break;

                    case 51:

                        if (curChar == 101)
                          {
                            jjstateSet[jjnewStateCnt++] = 50;
                          }

                        break;

                    case 56:

                        if ((curChar == 116) && (kind > 101))
                          {
                            kind = 101;
                          }

                        break;

                    case 57:

                        if (curChar == 110)
                          {
                            jjCheckNAdd(56);
                          }

                        break;

                    case 62:

                        if ((0x2000000020L & l) != 0L)
                          {
                            jjAddStates(38, 39);
                          }

                        break;

                    case 66:

                        if ((0x2000000020L & l) != 0L)
                          {
                            jjAddStates(40, 41);
                          }

                        break;

                    case 70:

                        if ((0x2000000020L & l) != 0L)
                          {
                            jjAddStates(42, 43);
                          }

                        break;

                    case 74:

                        if ((0x100000001000000L & l) != 0L)
                          {
                            jjCheckNAdd(75);
                          }

                        break;

                    case 75:

                        if ((0x7e0000007eL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddTwoStates(75, 2);

                        break;

                    case 79:
                        jjAddStates(15, 17);

                        break;

                    case 84:
                        jjCheckNAddTwoStates(84, 85);

                        break;

                    case 86:
                    case 87:
                        jjCheckNAddTwoStates(87, 85);

                        break;

                    case 89:

                        if (curChar == 102)
                          {
                            jjAddStates(30, 31);
                          }

                        break;

                    case 90:

                        if (curChar == 115)
                          {
                            jjCheckNAdd(18);
                          }

                        break;

                    case 91:

                        if (curChar == 108)
                          {
                            jjstateSet[jjnewStateCnt++] = 90;
                          }

                        break;

                    case 93:

                        if (curChar == 97)
                          {
                            jjCheckNAdd(56);
                          }

                        break;

                    case 94:

                        if (curChar == 111)
                          {
                            jjstateSet[jjnewStateCnt++] = 93;
                          }

                        break;

                    case 95:

                        if (curChar == 108)
                          {
                            jjstateSet[jjnewStateCnt++] = 94;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 10:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjAddStates(9, 11);
                          }

                        break;

                    case 79:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjAddStates(15, 17);
                          }

                        break;

                    case 84:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjCheckNAddTwoStates(84, 85);
                          }

                        break;

                    case 86:
                    case 87:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjCheckNAddTwoStates(87, 85);
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 96 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjStopStringLiteralDfa_6(int pos, long active0)
      {
        switch (pos)
          {
        default:
            return -1;
          }
      }

    private final int jjStartNfa_6(int pos, long active0)
      {
        return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
      }

    private final int jjStartNfaWithStates_6(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_6(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_6()
      {
        switch (curChar)
          {
        case 34:
            return jjStopAtPos(0, 34);

        default:
            return jjMoveNfa_6(0, 0);
          }
      }

    private final int jjMoveNfa_6(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 6;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 33)
                          {
                            kind = 33;
                          }

                        jjAddStates(44, 45);

                        break;

                    case 4:

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            jjAddStates(46, 47);
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:
                    case 1:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 33)
                          {
                            kind = 33;
                          }

                        jjCheckNAddTwoStates(1, 2);

                        break;

                    case 2:

                        if (curChar == 91)
                          {
                            jjstateSet[jjnewStateCnt++] = 3;
                          }

                        break;

                    case 3:
                    case 4:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(4, 5);
                          }

                        break;

                    case 5:

                        if (curChar == 93)
                          {
                            kind = 33;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 6 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjStopStringLiteralDfa_10(int pos, long active0)
      {
        switch (pos)
          {
        default:
            return -1;
          }
      }

    private final int jjStartNfa_10(int pos, long active0)
      {
        return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
      }

    private final int jjStartNfaWithStates_10(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_10(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_10()
      {
        switch (curChar)
          {
        default:
            return jjMoveNfa_10(0, 0);
          }
      }

    private final int jjMoveNfa_10(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((0x100002000L & l) != 0L)
                          {
                            kind = 43;
                          }

                        break;

                    case 2:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        kind = 45;
                        jjstateSet[jjnewStateCnt++] = 2;

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:
                    case 2:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 45)
                          {
                            kind = 45;
                          }

                        jjCheckNAdd(2);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 3 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjMoveStringLiteralDfa0_8()
      {
        return jjMoveNfa_8(0, 0);
      }

    private final int jjMoveNfa_8(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 2;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if ((0x3ff000000000000L & l) == 0L)
                          {
                            break;
                          }

                        kind = 40;
                        jjstateSet[jjnewStateCnt++] = 1;

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:
                    case 1:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 40)
                          {
                            kind = 40;
                          }

                        jjCheckNAdd(1);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 2 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjStopStringLiteralDfa_4(int pos, long active0)
      {
        switch (pos)
          {
        default:
            return -1;
          }
      }

    private final int jjStartNfa_4(int pos, long active0)
      {
        return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
      }

    private final int jjStartNfaWithStates_4(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_4(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_4()
      {
        switch (curChar)
          {
        case 34:
            return jjStopAtPos(0, 26);

        case 36:
            return jjStartNfaWithStates_4(0, 27, 2);

        case 92:
            return jjStopAtPos(0, 29);

        default:
            return jjMoveNfa_4(1, 0);
          }
      }

    private final int jjMoveNfa_4(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 4;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if (curChar == 36)
                          {
                            jjstateSet[jjnewStateCnt++] = 2;
                          }

                        break;

                    case 0:

                        if ((curChar == 36) && (kind > 28))
                          {
                            kind = 28;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if (curChar == 123)
                          {
                            jjstateSet[jjnewStateCnt++] = 0;
                          }

                        break;

                    case 2:

                        if ((curChar == 123) && (kind > 28))
                          {
                            kind = 28;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 4 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    public void ReInit(CharStream stream)
      {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
      }

    private final void ReInitRounds()
      {
        int i;
        jjround = 0x80000001;

        for (i = 96; i-- > 0;)
            jjrounds[i] = 0x80000000;
      }

    public void ReInit(CharStream stream, int lexState)
      {
        ReInit(stream);
        SwitchTo(lexState);
      }

    public void SwitchTo(int lexState)
      {
        if ((lexState >= 12) || (lexState < 0))
          {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " +
                lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
          }
        else
        {
            curLexState = lexState;
          }
      }

    protected Token jjFillToken()
      {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;

        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();

        return t;
      }

    public Token getNextToken()
      {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

EOFLoop: 
        for (;;)
          {
            try
              {
                curChar = input_stream.BeginToken();
              }
            catch (java.io.IOException e)
              {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();

                return matchedToken;
              }

            image = null;
            jjimageLen = 0;

            for (;;)
              {
                switch (curLexState)
                  {
                case 0:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();

                    break;

                case 1:

                    try
                      {
                        input_stream.backup(0);

                        while ((curChar <= 32) &&
                                ((0x100002600L & (1L << curChar)) != 0L))
                            curChar = input_stream.BeginToken();
                      }
                    catch (java.io.IOException e1)
                      {
                        continue EOFLoop;
                      }

                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();

                    break;

                case 2:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 23))
                      {
                        jjmatchedKind = 23;
                      }

                    break;

                case 3:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_3();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 25))
                      {
                        jjmatchedKind = 25;
                      }

                    break;

                case 4:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_4();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 30))
                      {
                        jjmatchedKind = 30;
                      }

                    break;

                case 5:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_5();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 32))
                      {
                        jjmatchedKind = 32;
                      }

                    break;

                case 6:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_6();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 35))
                      {
                        jjmatchedKind = 35;
                      }

                    break;

                case 7:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_7();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 39))
                      {
                        jjmatchedKind = 39;
                      }

                    break;

                case 8:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_8();

                    break;

                case 9:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_9();

                    break;

                case 10:

                    try
                      {
                        input_stream.backup(0);

                        while ((curChar <= 10) &&
                                ((0x400L & (1L << curChar)) != 0L))
                            curChar = input_stream.BeginToken();
                      }
                    catch (java.io.IOException e1)
                      {
                        continue EOFLoop;
                      }

                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_10();

                    if ((jjmatchedPos == 0) && (jjmatchedKind > 46))
                      {
                        jjmatchedKind = 46;
                      }

                    break;

                case 11:
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_11();

                    break;
                  }

                if (jjmatchedKind != 0x7fffffff)
                  {
                    if ((jjmatchedPos + 1) < curPos)
                      {
                        input_stream.backup(curPos - jjmatchedPos - 1);
                      }

                    if ((jjtoToken[jjmatchedKind >> 6] &
                            (1L << (jjmatchedKind & 077))) != 0L)
                      {
                        matchedToken = jjFillToken();

                        if (jjnewLexState[jjmatchedKind] != -1)
                          {
                            curLexState = jjnewLexState[jjmatchedKind];
                          }

                        return matchedToken;
                      }
                    else if ((jjtoSkip[jjmatchedKind >> 6] &
                            (1L << (jjmatchedKind & 077))) != 0L)
                      {
                        SkipLexicalActions(null);

                        if (jjnewLexState[jjmatchedKind] != -1)
                          {
                            curLexState = jjnewLexState[jjmatchedKind];
                          }

                        continue EOFLoop;
                      }

                    jjimageLen += (jjmatchedPos + 1);

                    if (jjnewLexState[jjmatchedKind] != -1)
                      {
                        curLexState = jjnewLexState[jjmatchedKind];
                      }

                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;

                    try
                      {
                        curChar = input_stream.readChar();

                        continue;
                      }
                    catch (java.io.IOException e1)
                      {
                      }
                  }

                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;

                try
                  {
                    input_stream.readChar();
                    input_stream.backup(1);
                  }
                catch (java.io.IOException e1)
                  {
                    EOFSeen = true;
                    error_after = (curPos <= 1) ? "" : input_stream.GetImage();

                    if ((curChar == '\n') || (curChar == '\r'))
                      {
                        error_line++;
                        error_column = 0;
                      }
                    else
                    {
                        error_column++;
                      }
                  }

                if (!EOFSeen)
                  {
                    input_stream.backup(1);
                    error_after = (curPos <= 1) ? "" : input_stream.GetImage();
                  }

                throw new TokenMgrError(EOFSeen, curLexState, error_line,
                    error_column, error_after, curChar,
                    TokenMgrError.LEXICAL_ERROR);
              }
          }
      }

    void SkipLexicalActions(Token matchedToken)
      {
        switch (jjmatchedKind)
          {
        case 40:

            if (image == null)
              {
                image = new StringBuffer();
              }

            image.append(input_stream.GetSuffix(jjimageLen +
                    (lengthOfMatch = jjmatchedPos + 1)));
            HereDocEnd = image.toString();

            break;

        case 45:

            if (image == null)
              {
                image = new StringBuffer();
              }

            image.append(input_stream.GetSuffix(jjimageLen +
                    (lengthOfMatch = jjmatchedPos + 1)));
            SwitchTo(HereDocEnd.equals(image.toString()) ? DEFAULT : HEREDOC);

            break;

        default:
            break;
          }
      }
  }
