/* Generated By:JavaCC: Do not edit this line. PropertyParserTokenManager.java */
package net.sf.xpontus.view.editor.syntax.properties;

import net.sf.xpontus.view.editor.syntax.CharStream;
import net.sf.xpontus.view.editor.syntax.Token;
import net.sf.xpontus.view.editor.syntax.TokenMgrError;


public class PropertyParserTokenManager implements PropertyParserConstants
  {
    static final long[] jjbitVec0 = 
        {
            0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL
        };
    static final long[] jjbitVec2 = 
        {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
        };
    static final int[] jjnextStates = 
        {
            10, 12, 13, 15, 17, 7, 8, 9, 10, 12, 14, 15, 17, 2, 3, 5, 9, 10, 12,
            10, 12, 13, 14, 15, 17, 19, 11, 16, 0, 1, 4, 0, 1, 3, 0, 1, 4, 3, 3,
            0, 4, 1, 5,
        };
    public static final String[] jjstrLiteralImages = 
        {
            "", null, null, null, null, null, null, null, null, null,
        };
    public static final String[] lexStateNames = 
        {
            "DEFAULT", "ParseEquals", "ParseValue",
        };
    public static final int[] jjnewLexState = 
        {
            -1, -1, -1, -1, -1, -1, 1, -1, 2, 0,
        };
    static final long[] jjtoToken = { 0x3f1L, };
    static final long[] jjtoSkip = { 0xeL, };
    public java.io.PrintStream debugStream = System.out;
    protected CharStream input_stream;
    private final int[] jjrounds = new int[21];
    private final int[] jjstateSet = new int[42];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;
    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public PropertyParserTokenManager(CharStream stream)
      {
        input_stream = stream;
      }

    public PropertyParserTokenManager(CharStream stream, int lexState)
      {
        this(stream);
        SwitchTo(lexState);
      }

    public void setDebugStream(java.io.PrintStream ds)
      {
        debugStream = ds;
      }

    private final int jjMoveStringLiteralDfa0_0()
      {
        return jjMoveNfa_0(1, 0);
      }

    private final void jjCheckNAdd(int state)
      {
        if (jjrounds[state] != jjround)
          {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
          }
      }

    private final void jjAddStates(int start, int end)
      {
        do
          {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
          }
        while (start++ != end);
      }

    private final void jjCheckNAddTwoStates(int state1, int state2)
      {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
      }

    private final void jjCheckNAddStates(int start, int end)
      {
        do
          {
            jjCheckNAdd(jjnextStates[start]);
          }
        while (start++ != end);
      }

    private final void jjCheckNAddStates(int start)
      {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
      }

    private final int jjMoveNfa_0(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 21;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if ((0xdbfffff6fffffdffL & l) != 0L)
                          {
                            if (kind > 6)
                              {
                                kind = 6;
                              }

                            jjCheckNAddStates(0, 4);
                          }
                        else if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddStates(5, 12);
                          }
                        else if (curChar == 35)
                          {
                            if (kind > 4)
                              {
                                kind = 4;
                              }

                            jjCheckNAddStates(13, 15);
                          }

                        if ((0x2400L & l) != 0L)
                          {
                            if (kind > 1)
                              {
                                kind = 1;
                              }

                            jjCheckNAdd(0);
                          }

                        break;

                    case 0:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 1)
                          {
                            kind = 1;
                          }

                        jjCheckNAdd(0);

                        break;

                    case 2:

                        if ((0xffffffffffffdbffL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddStates(13, 15);

                        break;

                    case 3:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(3, 5);

                        break;

                    case 4:

                        if (curChar != 10)
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjCheckNAddTwoStates(3, 5);

                        break;

                    case 5:

                        if (curChar == 13)
                          {
                            jjstateSet[jjnewStateCnt++] = 4;
                          }

                        break;

                    case 6:

                        if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddStates(5, 12);
                          }

                        break;

                    case 7:

                        if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddTwoStates(7, 8);
                          }

                        break;

                    case 8:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 2)
                          {
                            kind = 2;
                          }

                        jjCheckNAdd(8);

                        break;

                    case 9:

                        if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddStates(16, 18);
                          }

                        break;

                    case 11:

                        if ((0x2400000100000200L & l) != 0L)
                          {
                            jjCheckNAddStates(19, 21);
                          }

                        break;

                    case 12:

                        if ((0xdbfffff6fffffdffL & l) != 0L)
                          {
                            jjCheckNAddStates(19, 21);
                          }

                        break;

                    case 13:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 5)
                          {
                            kind = 5;
                          }

                        jjCheckNAdd(13);

                        break;

                    case 14:

                        if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddStates(22, 24);
                          }

                        break;

                    case 16:

                        if ((0x2400000100000200L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddTwoStates(15, 17);

                        break;

                    case 17:

                        if ((0xdbfffff6fffffdffL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddTwoStates(15, 17);

                        break;

                    case 19:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 3)
                          {
                            kind = 3;
                          }

                        jjstateSet[jjnewStateCnt++] = 19;

                        break;

                    case 20:

                        if ((0xdbfffff6fffffdffL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddStates(0, 4);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddStates(0, 4);

                        if (curChar == 92)
                          {
                            jjCheckNAddStates(25, 27);
                          }

                        break;

                    case 2:

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjAddStates(13, 15);

                        break;

                    case 10:

                        if (curChar == 92)
                          {
                            jjCheckNAdd(11);
                          }

                        break;

                    case 12:
                        jjCheckNAddStates(19, 21);

                        break;

                    case 15:

                        if (curChar == 92)
                          {
                            jjCheckNAdd(16);
                          }

                        break;

                    case 17:

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddTwoStates(15, 17);

                        break;

                    case 18:

                        if (curChar == 92)
                          {
                            jjCheckNAddStates(25, 27);
                          }

                        break;

                    case 20:

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddStates(0, 4);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 1:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                          {
                            break;
                          }

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddStates(0, 4);

                        break;

                    case 2:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                          {
                            break;
                          }

                        if (kind > 4)
                          {
                            kind = 4;
                          }

                        jjAddStates(13, 15);

                        break;

                    case 12:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                          {
                            jjCheckNAddStates(19, 21);
                          }

                        break;

                    case 17:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                          {
                            break;
                          }

                        if (kind > 6)
                          {
                            kind = 6;
                          }

                        jjCheckNAddTwoStates(15, 17);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 21 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjMoveStringLiteralDfa0_2()
      {
        return jjMoveNfa_2(5, 0);
      }

    private final int jjMoveNfa_2(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 5;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 5:

                        if ((0xffffffffffffdbffL & l) != 0L)
                          {
                            if (kind > 9)
                              {
                                kind = 9;
                              }

                            jjCheckNAddStates(28, 30);
                          }
                        else if ((0x2400L & l) != 0L)
                          {
                            if (kind > 9)
                              {
                                kind = 9;
                              }

                            jjCheckNAdd(4);
                          }

                        break;

                    case 0:

                        if ((0xffffffffffffdbffL & l) == 0L)
                          {
                            break;
                          }

                        kind = 9;
                        jjCheckNAddStates(28, 30);

                        break;

                    case 2:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddStates(31, 33);

                        break;

                    case 3:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddStates(34, 37);

                        break;

                    case 4:

                        if ((0x2400L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAdd(4);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 5:

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddStates(28, 30);

                        if (curChar == 92)
                          {
                            jjstateSet[jjnewStateCnt++] = 2;
                          }

                        break;

                    case 0:

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddStates(28, 30);

                        break;

                    case 1:

                        if (curChar == 92)
                          {
                            jjstateSet[jjnewStateCnt++] = 2;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 5:
                    case 0:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                          {
                            break;
                          }

                        if (kind > 9)
                          {
                            kind = 9;
                          }

                        jjCheckNAddStates(28, 30);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 5 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private final int jjMoveStringLiteralDfa0_1()
      {
        return jjMoveNfa_1(2, 0);
      }

    private final int jjMoveNfa_1(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 6;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 2:

                        if ((0x100000200L & l) != 0L)
                          {
                            if (kind > 8)
                              {
                                kind = 8;
                              }

                            jjCheckNAddStates(38, 42);
                          }
                        else if (curChar == 58)
                          {
                            if (kind > 8)
                              {
                                kind = 8;
                              }
                          }
                        else if (curChar == 61)
                          {
                            if (kind > 8)
                              {
                                kind = 8;
                              }
                          }

                        break;

                    case 0:

                        if (curChar == 61)
                          {
                            kind = 8;
                          }

                        break;

                    case 1:

                        if (curChar == 58)
                          {
                            kind = 8;
                          }

                        break;

                    case 3:

                        if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddTwoStates(3, 0);
                          }

                        break;

                    case 4:

                        if ((0x100000200L & l) != 0L)
                          {
                            jjCheckNAddTwoStates(4, 1);
                          }

                        break;

                    case 5:

                        if ((0x100000200L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 8)
                          {
                            kind = 8;
                          }

                        jjCheckNAdd(5);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 6 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
        long l1, long l2)
      {
        switch (hiByte)
          {
        case 0:
            return ((jjbitVec2[i2] & l2) != 0L);

        default:

            if ((jjbitVec0[i1] & l1) != 0L)
              {
                return true;
              }

            return false;
          }
      }

    public void ReInit(CharStream stream)
      {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
      }

    private final void ReInitRounds()
      {
        int i;
        jjround = 0x80000001;

        for (i = 21; i-- > 0;)
            jjrounds[i] = 0x80000000;
      }

    public void ReInit(CharStream stream, int lexState)
      {
        ReInit(stream);
        SwitchTo(lexState);
      }

    public void SwitchTo(int lexState)
      {
        if ((lexState >= 3) || (lexState < 0))
          {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " +
                lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
          }
        else
        {
            curLexState = lexState;
          }
      }

    protected Token jjFillToken()
      {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;

        if (jjmatchedPos < 0)
          {
            if (image == null)
              {
                t.image = "";
              }
            else
            {
                t.image = image.toString();
              }

            t.beginLine = t.endLine = input_stream.getBeginLine();
            t.beginColumn = t.endColumn = input_stream.getBeginColumn();
          }
        else
          {
            String im = jjstrLiteralImages[jjmatchedKind];
            t.image = (im == null) ? input_stream.GetImage() : im;
            t.beginLine = input_stream.getBeginLine();
            t.beginColumn = input_stream.getBeginColumn();
            t.endLine = input_stream.getEndLine();
            t.endColumn = input_stream.getEndColumn();
          }

        return t;
      }

    public Token getNextToken()
      {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

EOFLoop: 
        for (;;)
          {
            try
              {
                curChar = input_stream.BeginToken();
              }
            catch (java.io.IOException e)
              {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();

                return matchedToken;
              }

            image = null;
            jjimageLen = 0;

            switch (curLexState)
              {
            case 0:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_0();

                if ((jjmatchedPos == 0) && (jjmatchedKind > 7))
                  {
                    jjmatchedKind = 7;
                  }

                break;

            case 1:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_1();

                break;

            case 2:
                jjmatchedKind = 9;
                jjmatchedPos = -1;
                curPos = 0;
                curPos = jjMoveStringLiteralDfa0_2();

                break;
              }

            if (jjmatchedKind != 0x7fffffff)
              {
                if ((jjmatchedPos + 1) < curPos)
                  {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                  }

                if ((jjtoToken[jjmatchedKind >> 6] &
                        (1L << (jjmatchedKind & 077))) != 0L)
                  {
                    matchedToken = jjFillToken();
                    TokenLexicalActions(matchedToken);

                    if (jjnewLexState[jjmatchedKind] != -1)
                      {
                        curLexState = jjnewLexState[jjmatchedKind];
                      }

                    return matchedToken;
                  }
                else
                  {
                    if (jjnewLexState[jjmatchedKind] != -1)
                      {
                        curLexState = jjnewLexState[jjmatchedKind];
                      }

                    continue EOFLoop;
                  }
              }

            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;

            try
              {
                input_stream.readChar();
                input_stream.backup(1);
              }
            catch (java.io.IOException e1)
              {
                EOFSeen = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();

                if ((curChar == '\n') || (curChar == '\r'))
                  {
                    error_line++;
                    error_column = 0;
                  }
                else
                {
                    error_column++;
                  }
              }

            if (!EOFSeen)
              {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
              }

            throw new TokenMgrError(EOFSeen, curLexState, error_line,
                error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
          }
      }

    void TokenLexicalActions(Token matchedToken)
      {
        switch (jjmatchedKind)
          {
        default:
            break;
          }
      }
  }
