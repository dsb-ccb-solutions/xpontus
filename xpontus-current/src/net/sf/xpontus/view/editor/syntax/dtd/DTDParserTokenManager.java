/* Generated By:JavaCC: Do not edit this line. DTDParserTokenManager.java */
package net.sf.xpontus.view.editor.syntax.dtd;

import net.sf.xpontus.view.editor.ILexer;
import net.sf.xpontus.view.editor.syntax.CharStream;
import net.sf.xpontus.view.editor.syntax.FastCharStream;
import net.sf.xpontus.view.editor.syntax.ParseException;
import net.sf.xpontus.view.editor.syntax.Token;
import net.sf.xpontus.view.editor.syntax.TokenMgrError;


public class DTDParserTokenManager implements DTDParserConstants
  {
    static final long[] jjbitVec0 = 
        {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
        };
    static final int[] jjnextStates = { 20, 21, 14, 15, 18, 6, 7, 9, 10, 22, 23, };
    public static final String[] jjstrLiteralImages = 
        {
            "", null, null, null, "\43\106\111\130\105\104",
            "\43\111\115\120\114\111\105\104", "\43\120\103\104\101\124\101",
            "\43\122\105\121\125\111\122\105\104",
            "\74\41\105\114\105\115\105\116\124",
            "\74\41\101\124\124\114\111\123\124", "\103\104\101\124\101",
            "\101\116\131", "\105\115\120\124\131", "\111\104",
            "\111\104\122\105\106", "\111\104\122\105\106\123",
            "\105\116\124\111\124\131", "\105\116\124\111\124\111\105\123",
            "\116\115\124\117\113\105\116", "\116\115\124\117\113\105\116\123",
            "\116\117\124\101\124\111\117\116", null, null, null, null, null,
            "\76", "\50", "\174", "\51\52", "\51", "\54", "\52", "\53", "\77",
        };
    public static final String[] lexStateNames = { "DEFAULT", };
    static final long[] jjtoToken = { 0x7fc7fffffL, };
    static final long[] jjtoSkip = { 0x3800000L, };
    public java.io.PrintStream debugStream = System.out;
    protected CharStream input_stream;
    private final int[] jjrounds = new int[24];
    private final int[] jjstateSet = new int[48];
    protected char curChar;
    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public DTDParserTokenManager(CharStream stream)
      {
        input_stream = stream;
      }

    public DTDParserTokenManager(CharStream stream, int lexState)
      {
        this(stream);
        SwitchTo(lexState);
      }

    public void setDebugStream(java.io.PrintStream ds)
      {
        debugStream = ds;
      }

    private final int jjStopStringLiteralDfa_0(int pos, long active0)
      {
        switch (pos)
          {
        case 0:

            if ((active0 & 0x300L) != 0L)
              {
                return 20;
              }

            if ((active0 & 0x1ffc00L) != 0L)
              {
                jjmatchedKind = 1;

                return 4;
              }

            return -1;

        case 1:

            if ((active0 & 0xe000L) != 0L)
              {
                return 4;
              }

            if ((active0 & 0x1f1c00L) != 0L)
              {
                if (jjmatchedPos != 1)
                  {
                    jjmatchedKind = 21;
                    jjmatchedPos = 1;
                  }

                return 4;
              }

            if ((active0 & 0x300L) != 0L)
              {
                return 19;
              }

            return -1;

        case 2:

            if ((active0 & 0x800L) != 0L)
              {
                return 4;
              }

            if ((active0 & 0x1fd400L) != 0L)
              {
                jjmatchedKind = 21;
                jjmatchedPos = 2;

                return 4;
              }

            return -1;

        case 3:

            if ((active0 & 0x1fd400L) != 0L)
              {
                jjmatchedKind = 21;
                jjmatchedPos = 3;

                return 4;
              }

            return -1;

        case 4:

            if ((active0 & 0xd400L) != 0L)
              {
                return 4;
              }

            if ((active0 & 0x1f0000L) != 0L)
              {
                if (jjmatchedPos != 4)
                  {
                    jjmatchedKind = 21;
                    jjmatchedPos = 4;
                  }

                return 4;
              }

            return -1;

        case 5:

            if ((active0 & 0x18000L) != 0L)
              {
                return 4;
              }

            if ((active0 & 0x1e0000L) != 0L)
              {
                jjmatchedKind = 21;
                jjmatchedPos = 5;

                return 4;
              }

            return -1;

        case 6:

            if ((active0 & 0xc0000L) != 0L)
              {
                return 4;
              }

            if ((active0 & 0x120000L) != 0L)
              {
                if (jjmatchedPos != 6)
                  {
                    jjmatchedKind = 21;
                    jjmatchedPos = 6;
                  }

                return 4;
              }

            return -1;

        case 7:

            if ((active0 & 0x1a0000L) != 0L)
              {
                return 4;
              }

            return -1;

        default:
            return -1;
          }
      }

    private final int jjStartNfa_0(int pos, long active0)
      {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
      }

    private final int jjStopAtPos(int pos, int kind)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        return pos + 1;
      }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state)
      {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            return pos + 1;
          }

        return jjMoveNfa_0(state, pos + 1);
      }

    private final int jjMoveStringLiteralDfa0_0()
      {
        switch (curChar)
          {
        case 35:
            return jjMoveStringLiteralDfa1_0(0xf0L);

        case 40:
            return jjStopAtPos(0, 27);

        case 41:
            jjmatchedKind = 30;

            return jjMoveStringLiteralDfa1_0(0x20000000L);

        case 42:
            return jjStopAtPos(0, 32);

        case 43:
            return jjStopAtPos(0, 33);

        case 44:
            return jjStopAtPos(0, 31);

        case 60:
            return jjMoveStringLiteralDfa1_0(0x300L);

        case 62:
            return jjStopAtPos(0, 26);

        case 63:
            return jjStopAtPos(0, 34);

        case 65:
            return jjMoveStringLiteralDfa1_0(0x800L);

        case 67:
            return jjMoveStringLiteralDfa1_0(0x400L);

        case 69:
            return jjMoveStringLiteralDfa1_0(0x31000L);

        case 73:
            return jjMoveStringLiteralDfa1_0(0xe000L);

        case 78:
            return jjMoveStringLiteralDfa1_0(0x1c0000L);

        case 124:
            return jjStopAtPos(0, 28);

        default:
            return jjMoveNfa_0(0, 0);
          }
      }

    private final int jjMoveStringLiteralDfa1_0(long active0)
      {
        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(0, active0);

            return 1;
          }

        switch (curChar)
          {
        case 33:
            return jjMoveStringLiteralDfa2_0(active0, 0x300L);

        case 42:

            if ((active0 & 0x20000000L) != 0L)
              {
                return jjStopAtPos(1, 29);
              }

            break;

        case 68:

            if ((active0 & 0x2000L) != 0L)
              {
                jjmatchedKind = 13;
                jjmatchedPos = 1;
              }

            return jjMoveStringLiteralDfa2_0(active0, 0xc400L);

        case 70:
            return jjMoveStringLiteralDfa2_0(active0, 0x10L);

        case 73:
            return jjMoveStringLiteralDfa2_0(active0, 0x20L);

        case 77:
            return jjMoveStringLiteralDfa2_0(active0, 0xc1000L);

        case 78:
            return jjMoveStringLiteralDfa2_0(active0, 0x30800L);

        case 79:
            return jjMoveStringLiteralDfa2_0(active0, 0x100000L);

        case 80:
            return jjMoveStringLiteralDfa2_0(active0, 0x40L);

        case 82:
            return jjMoveStringLiteralDfa2_0(active0, 0x80L);

        default:
            break;
          }

        return jjStartNfa_0(0, active0);
      }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(0, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(1, active0);

            return 2;
          }

        switch (curChar)
          {
        case 65:
            return jjMoveStringLiteralDfa3_0(active0, 0x600L);

        case 67:
            return jjMoveStringLiteralDfa3_0(active0, 0x40L);

        case 69:
            return jjMoveStringLiteralDfa3_0(active0, 0x180L);

        case 73:
            return jjMoveStringLiteralDfa3_0(active0, 0x10L);

        case 77:
            return jjMoveStringLiteralDfa3_0(active0, 0x20L);

        case 80:
            return jjMoveStringLiteralDfa3_0(active0, 0x1000L);

        case 82:
            return jjMoveStringLiteralDfa3_0(active0, 0xc000L);

        case 84:
            return jjMoveStringLiteralDfa3_0(active0, 0x1f0000L);

        case 89:

            if ((active0 & 0x800L) != 0L)
              {
                return jjStartNfaWithStates_0(2, 11, 4);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_0(1, active0);
      }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(1, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(2, active0);

            return 3;
          }

        switch (curChar)
          {
        case 65:
            return jjMoveStringLiteralDfa4_0(active0, 0x100000L);

        case 68:
            return jjMoveStringLiteralDfa4_0(active0, 0x40L);

        case 69:
            return jjMoveStringLiteralDfa4_0(active0, 0xc000L);

        case 73:
            return jjMoveStringLiteralDfa4_0(active0, 0x30000L);

        case 76:
            return jjMoveStringLiteralDfa4_0(active0, 0x100L);

        case 79:
            return jjMoveStringLiteralDfa4_0(active0, 0xc0000L);

        case 80:
            return jjMoveStringLiteralDfa4_0(active0, 0x20L);

        case 81:
            return jjMoveStringLiteralDfa4_0(active0, 0x80L);

        case 84:
            return jjMoveStringLiteralDfa4_0(active0, 0x1600L);

        case 88:
            return jjMoveStringLiteralDfa4_0(active0, 0x10L);

        default:
            break;
          }

        return jjStartNfa_0(2, active0);
      }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(2, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(3, active0);

            return 4;
          }

        switch (curChar)
          {
        case 65:

            if ((active0 & 0x400L) != 0L)
              {
                return jjStartNfaWithStates_0(4, 10, 4);
              }

            return jjMoveStringLiteralDfa5_0(active0, 0x40L);

        case 69:
            return jjMoveStringLiteralDfa5_0(active0, 0x110L);

        case 70:

            if ((active0 & 0x4000L) != 0L)
              {
                jjmatchedKind = 14;
                jjmatchedPos = 4;
              }

            return jjMoveStringLiteralDfa5_0(active0, 0x8000L);

        case 75:
            return jjMoveStringLiteralDfa5_0(active0, 0xc0000L);

        case 76:
            return jjMoveStringLiteralDfa5_0(active0, 0x20L);

        case 84:
            return jjMoveStringLiteralDfa5_0(active0, 0x130200L);

        case 85:
            return jjMoveStringLiteralDfa5_0(active0, 0x80L);

        case 89:

            if ((active0 & 0x1000L) != 0L)
              {
                return jjStartNfaWithStates_0(4, 12, 4);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_0(3, active0);
      }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(3, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(4, active0);

            return 5;
          }

        switch (curChar)
          {
        case 68:

            if ((active0 & 0x10L) != 0L)
              {
                return jjStopAtPos(5, 4);
              }

            break;

        case 69:
            return jjMoveStringLiteralDfa6_0(active0, 0xc0000L);

        case 73:
            return jjMoveStringLiteralDfa6_0(active0, 0x1200a0L);

        case 76:
            return jjMoveStringLiteralDfa6_0(active0, 0x200L);

        case 77:
            return jjMoveStringLiteralDfa6_0(active0, 0x100L);

        case 83:

            if ((active0 & 0x8000L) != 0L)
              {
                return jjStartNfaWithStates_0(5, 15, 4);
              }

            break;

        case 84:
            return jjMoveStringLiteralDfa6_0(active0, 0x40L);

        case 89:

            if ((active0 & 0x10000L) != 0L)
              {
                return jjStartNfaWithStates_0(5, 16, 4);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_0(4, active0);
      }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(4, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(5, active0);

            return 6;
          }

        switch (curChar)
          {
        case 65:

            if ((active0 & 0x40L) != 0L)
              {
                return jjStopAtPos(6, 6);
              }

            break;

        case 69:
            return jjMoveStringLiteralDfa7_0(active0, 0x20120L);

        case 73:
            return jjMoveStringLiteralDfa7_0(active0, 0x200L);

        case 78:

            if ((active0 & 0x40000L) != 0L)
              {
                jjmatchedKind = 18;
                jjmatchedPos = 6;
              }

            return jjMoveStringLiteralDfa7_0(active0, 0x80000L);

        case 79:
            return jjMoveStringLiteralDfa7_0(active0, 0x100000L);

        case 82:
            return jjMoveStringLiteralDfa7_0(active0, 0x80L);

        default:
            break;
          }

        return jjStartNfa_0(5, active0);
      }

    private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(5, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(6, active0);

            return 7;
          }

        switch (curChar)
          {
        case 68:

            if ((active0 & 0x20L) != 0L)
              {
                return jjStopAtPos(7, 5);
              }

            break;

        case 69:
            return jjMoveStringLiteralDfa8_0(active0, 0x80L);

        case 78:

            if ((active0 & 0x100000L) != 0L)
              {
                return jjStartNfaWithStates_0(7, 20, 4);
              }

            return jjMoveStringLiteralDfa8_0(active0, 0x100L);

        case 83:

            if ((active0 & 0x20000L) != 0L)
              {
                return jjStartNfaWithStates_0(7, 17, 4);
              }
            else if ((active0 & 0x80000L) != 0L)
              {
                return jjStartNfaWithStates_0(7, 19, 4);
              }

            return jjMoveStringLiteralDfa8_0(active0, 0x200L);

        default:
            break;
          }

        return jjStartNfa_0(6, active0);
      }

    private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
      {
        if ((active0 &= old0) == 0L)
          {
            return jjStartNfa_0(6, old0);
          }

        try
          {
            curChar = input_stream.readChar();
          }
        catch (java.io.IOException e)
          {
            jjStopStringLiteralDfa_0(7, active0);

            return 8;
          }

        switch (curChar)
          {
        case 68:

            if ((active0 & 0x80L) != 0L)
              {
                return jjStopAtPos(8, 7);
              }

            break;

        case 84:

            if ((active0 & 0x100L) != 0L)
              {
                return jjStopAtPos(8, 8);
              }
            else if ((active0 & 0x200L) != 0L)
              {
                return jjStopAtPos(8, 9);
              }

            break;

        default:
            break;
          }

        return jjStartNfa_0(7, active0);
      }

    private final void jjCheckNAdd(int state)
      {
        if (jjrounds[state] != jjround)
          {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
          }
      }

    private final void jjAddStates(int start, int end)
      {
        do
          {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
          }
        while (start++ != end);
      }

    private final void jjCheckNAddTwoStates(int state1, int state2)
      {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
      }

    private final void jjCheckNAddStates(int start, int end)
      {
        do
          {
            jjCheckNAdd(jjnextStates[start]);
          }
        while (start++ != end);
      }

    private final void jjCheckNAddStates(int start)
      {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
      }

    private final int jjMoveNfa_0(int startState, int curPos)
      {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 24;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
          {
            if (++jjround == 0x7fffffff)
              {
                ReInitRounds();
              }

            if (curChar < 64)
              {
                long l = 1L << curChar;
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 20:

                        if (curChar == 33)
                          {
                            jjstateSet[jjnewStateCnt++] = 19;
                          }
                        else if (curChar == 63)
                          {
                            jjCheckNAddTwoStates(22, 23);
                          }

                        break;

                    case 0:

                        if ((0x7ff600000000000L & l) != 0L)
                          {
                            if (kind > 3)
                              {
                                kind = 3;
                              }
                          }
                        else if ((0x100002600L & l) != 0L)
                          {
                            if (kind > 23)
                              {
                                kind = 23;
                              }

                            jjCheckNAdd(11);
                          }
                        else if (curChar == 60)
                          {
                            jjAddStates(0, 1);
                          }
                        else if (curChar == 34)
                          {
                            jjCheckNAddTwoStates(9, 10);
                          }
                        else if (curChar == 39)
                          {
                            jjCheckNAddTwoStates(6, 7);
                          }

                        if ((0x3ff000000000000L & l) != 0L)
                          {
                            if (kind > 2)
                              {
                                kind = 2;
                              }
                          }
                        else if (curChar == 58)
                          {
                            if (kind > 21)
                              {
                                kind = 21;
                              }

                            jjCheckNAdd(4);
                          }

                        break;

                    case 1:

                        if (((0x3ff000000000000L & l) != 0L) && (kind > 2))
                          {
                            kind = 2;
                          }

                        break;

                    case 2:

                        if (((0x7ff600000000000L & l) != 0L) && (kind > 3))
                          {
                            kind = 3;
                          }

                        break;

                    case 3:

                        if (curChar != 58)
                          {
                            break;
                          }

                        if (kind > 21)
                          {
                            kind = 21;
                          }

                        jjCheckNAdd(4);

                        break;

                    case 4:

                        if ((0x7ff600000000000L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 21)
                          {
                            kind = 21;
                          }

                        jjCheckNAdd(4);

                        break;

                    case 5:

                        if (curChar == 39)
                          {
                            jjCheckNAddTwoStates(6, 7);
                          }

                        break;

                    case 6:

                        if ((0xffffff7fffffffffL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(6, 7);
                          }

                        break;

                    case 7:

                        if ((curChar == 39) && (kind > 22))
                          {
                            kind = 22;
                          }

                        break;

                    case 8:

                        if (curChar == 34)
                          {
                            jjCheckNAddTwoStates(9, 10);
                          }

                        break;

                    case 9:

                        if ((0xfffffffbffffffffL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(9, 10);
                          }

                        break;

                    case 10:

                        if ((curChar == 34) && (kind > 22))
                          {
                            kind = 22;
                          }

                        break;

                    case 11:

                        if ((0x100002600L & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 23)
                          {
                            kind = 23;
                          }

                        jjCheckNAdd(11);

                        break;

                    case 12:

                        if (curChar == 60)
                          {
                            jjAddStates(0, 1);
                          }

                        break;

                    case 13:

                        if (curChar == 45)
                          {
                            jjCheckNAddStates(2, 4);
                          }

                        break;

                    case 14:

                        if ((0xffffdfffffffffffL & l) != 0L)
                          {
                            jjCheckNAddStates(2, 4);
                          }

                        break;

                    case 15:

                        if (curChar == 45)
                          {
                            jjCheckNAdd(14);
                          }

                        break;

                    case 16:

                        if ((curChar == 62) && (kind > 24))
                          {
                            kind = 24;
                          }

                        break;

                    case 17:

                        if (curChar == 45)
                          {
                            jjstateSet[jjnewStateCnt++] = 16;
                          }

                        break;

                    case 18:

                        if (curChar == 45)
                          {
                            jjstateSet[jjnewStateCnt++] = 17;
                          }

                        break;

                    case 19:

                        if (curChar == 45)
                          {
                            jjstateSet[jjnewStateCnt++] = 13;
                          }

                        break;

                    case 21:

                        if (curChar == 63)
                          {
                            jjCheckNAddTwoStates(22, 23);
                          }

                        break;

                    case 22:

                        if ((0xbfffffffffffffffL & l) != 0L)
                          {
                            jjCheckNAddTwoStates(22, 23);
                          }

                        break;

                    case 23:

                        if ((curChar == 62) && (kind > 25))
                          {
                            kind = 25;
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else if (curChar < 128)
              {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 0:

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 21)
                              {
                                kind = 21;
                              }

                            jjCheckNAdd(4);
                          }

                        if ((0x7fffffe87fffffeL & l) != 0L)
                          {
                            if (kind > 3)
                              {
                                kind = 3;
                              }
                          }

                        if ((0x7fffffe07fffffeL & l) != 0L)
                          {
                            if (kind > 1)
                              {
                                kind = 1;
                              }
                          }

                        break;

                    case 2:

                        if (((0x7fffffe87fffffeL & l) != 0L) && (kind > 3))
                          {
                            kind = 3;
                          }

                        break;

                    case 3:
                    case 4:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                          {
                            break;
                          }

                        if (kind > 21)
                          {
                            kind = 21;
                          }

                        jjCheckNAdd(4);

                        break;

                    case 6:
                        jjAddStates(5, 6);

                        break;

                    case 9:
                        jjAddStates(7, 8);

                        break;

                    case 14:
                        jjAddStates(2, 4);

                        break;

                    case 22:
                        jjAddStates(9, 10);

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }
            else
              {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                  {
                    switch (jjstateSet[--i])
                      {
                    case 6:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjAddStates(5, 6);
                          }

                        break;

                    case 9:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjAddStates(7, 8);
                          }

                        break;

                    case 14:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjAddStates(2, 4);
                          }

                        break;

                    case 22:

                        if ((jjbitVec0[i2] & l2) != 0L)
                          {
                            jjAddStates(9, 10);
                          }

                        break;

                    default:
                        break;
                      }
                  }
                while (i != startsAt);
              }

            if (kind != 0x7fffffff)
              {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
              }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 24 -
                        (jjnewStateCnt = startsAt)))
              {
                return curPos;
              }

            try
              {
                curChar = input_stream.readChar();
              }
            catch (java.io.IOException e)
              {
                return curPos;
              }
          }
      }

    public void ReInit(CharStream stream)
      {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
      }

    private final void ReInitRounds()
      {
        int i;
        jjround = 0x80000001;

        for (i = 24; i-- > 0;)
            jjrounds[i] = 0x80000000;
      }

    public void ReInit(CharStream stream, int lexState)
      {
        ReInit(stream);
        SwitchTo(lexState);
      }

    public void SwitchTo(int lexState)
      {
        if ((lexState >= 1) || (lexState < 0))
          {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " +
                lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
          }
        else
        {
            curLexState = lexState;
          }
      }

    protected Token jjFillToken()
      {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;

        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();

        return t;
      }

    public Token getNextToken()
      {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

EOFLoop: 
        for (;;)
          {
            try
              {
                curChar = input_stream.BeginToken();
              }
            catch (java.io.IOException e)
              {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();

                return matchedToken;
              }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();

            if (jjmatchedKind != 0x7fffffff)
              {
                if ((jjmatchedPos + 1) < curPos)
                  {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                  }

                if ((jjtoToken[jjmatchedKind >> 6] &
                        (1L << (jjmatchedKind & 077))) != 0L)
                  {
                    matchedToken = jjFillToken();

                    return matchedToken;
                  }
                else
                  {
                    continue EOFLoop;
                  }
              }

            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;

            try
              {
                input_stream.readChar();
                input_stream.backup(1);
              }
            catch (java.io.IOException e1)
              {
                EOFSeen = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();

                if ((curChar == '\n') || (curChar == '\r'))
                  {
                    error_line++;
                    error_column = 0;
                  }
                else
                {
                    error_column++;
                  }
              }

            if (!EOFSeen)
              {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
              }

            throw new TokenMgrError(EOFSeen, curLexState, error_line,
                error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
          }
      }
  }
