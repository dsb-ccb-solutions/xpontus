/*
 * MemoryComboBox.java
 *
 * Created on 30 juillet 2005, 19:19
 *
 *  Copyright (C) 2005-2007 Yves Zoundi
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation; either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

package net.sf.xpontus.view;

/**
 * a list which remembers the last 10 entries
 * @author  Yves Zoundi
 */
public class MemoryComboBox extends javax.swing.JComboBox {
    
    private final int LIMIT = 10;
    
    /**
     * 
     */
    public MemoryComboBox() {
        initComponents();
        java.awt.event.KeyAdapter adapter;
        adapter = new java.awt.event.KeyAdapter(){
            public void keyPressed(java.awt.event.KeyEvent e) {
                if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    Object str = getEditor().getItem();
                    
                    if (!isExisting(str) && !str.equals("")) {
                        add(str.toString());
                    }
                }
            }
        };
        getEditor().getEditorComponent().addKeyListener(adapter);
    }
    
    /**
     * 
     * @return 
     */
    public String getText() {
        Object str = getEditor().getItem();
        
        return (String) str;
    }
    
    /**
     * 
     */
    public void update() {
        add(getText());
    }
    
    /**
     * 
     * @param str 
     */
    public void setText(String str) {
        getEditor().setItem(str);
    }
    
    /**
     * 
     * @param obj 
     * @return 
     */
    public boolean isExisting(Object obj) {
        boolean exists = false;
        final int nb = getItemCount();
        for (int i = 0; i < nb; i++) {
            Object val = getItemAt(i);
            if (val.equals(obj)) {
                return true;
            }
        }
        
        return exists;
    }
    
    /**
     * 
     * @param item 
     */
    public void add(String item) {
        removeItem(item);
        insertItemAt(item, 0);
        setSelectedItem(item);
        
        if (getItemCount() > LIMIT) {
            removeItemAt(getItemCount() - 1);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setEditable(true);
    }
    // </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
