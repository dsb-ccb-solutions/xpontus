/* Generated By:JavaCC: Do not edit this line. XQueryParserTokenManager.java */
package net.sf.xpontus.view.editor.syntax.xquery;
import java.io.*;
import java.util.*;
import net.sf.xpontus.view.editor.syntax.*;
import net.sf.xpontus.view.editor.*;
import javax.swing.text.Segment;

public class XQueryParserTokenManager implements XQueryParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20L) != 0L)
            return 10;
         if ((active0 & 0x20000000000000L) != 0L)
            return 1;
         if ((active0 & 0x1ffffffdffffc0L) != 0L)
         {
            jjmatchedKind = 54;
            return 1;
         }
         if ((active1 & 0x600L) != 0L)
            return 3;
         if ((active1 & 0x2000L) != 0L)
            return 5;
         if ((active1 & 0x10L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x8840049020140L) != 0L)
            return 1;
         if ((active0 & 0x177bffb4fdfe80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x14bfff34d9ff00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x3400080240080L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x114c30002000L) != 0L)
            return 1;
         if ((active0 & 0x14aeb304d9df00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x228104880000L) != 0L)
            return 1;
         if ((active0 & 0x148c320051df00L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x200510200L) != 0L)
            return 1;
         if ((active0 & 0x148c300000dd00L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000004a00L) != 0L)
            return 1;
         if ((active0 & 0x148c2000009500L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x148c2000008500L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x1000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x4082000000100L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x10840000008400L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x4002000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x80000000100L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x4000000000000L) != 0L)
            return 1;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 18;
            return 1;
         }
         return -1;
      case 19:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 19;
            return 1;
         }
         return -1;
      case 20:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 20;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 34:
         return jjStartNfaWithStates_0(0, 68, 17);
      case 36:
         return jjStopAtPos(0, 81);
      case 40:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L);
      case 41:
         return jjStopAtPos(0, 58);
      case 42:
         return jjStopAtPos(0, 72);
      case 43:
         return jjStopAtPos(0, 71);
      case 44:
         return jjStopAtPos(0, 65);
      case 45:
         return jjStartNfaWithStates_0(0, 53, 1);
      case 46:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 47:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 58:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 59:
         return jjStopAtPos(0, 63);
      case 60:
         return jjStartNfaWithStates_0(0, 77, 5);
      case 61:
         return jjStartNfaWithStates_0(0, 69, 10);
      case 62:
         return jjStopAtPos(0, 75);
      case 64:
         return jjStopAtPos(0, 25);
      case 91:
         return jjStopAtPos(0, 61);
      case 92:
         return jjStopAtPos(0, 83);
      case 93:
         return jjStopAtPos(0, 62);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x440001808000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x440000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x11000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x5080000000840L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8020104000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000001080L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800048000100L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80002000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400200400L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x204000200L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10004000010000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8120810000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 59);
      case 125:
         return jjStopAtPos(0, 60);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 47:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 58:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 61:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10210004040400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080a80400a00L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x110000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000002000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20004000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000080100L, active1, 0L);
      case 111:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x2005400210080L, active1, 0L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x122000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000100000L);
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x28110004000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000400L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 1);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000010000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x90020002100L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 1);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x10800200808200L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 118:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 1);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000800L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x82000001000L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 1);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4840000900400L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000004000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x480000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8100008000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 1);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x10100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 1);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 1);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x83000004000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x800200400200L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000400L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x81000004300L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x802000000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 1);
         break;
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10040000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 1);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000400L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x14000000000100L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x82000000000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 1);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 1);
         break;
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4082000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 1);
         break;
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 1);
         break;
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 50, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 37, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec9 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec13 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if (curChar == 62)
                  {
                     if (kind > 80)
                        kind = 80;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 79)
                        kind = 79;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 61)
                     jjAddStates(3, 4);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(1);
                  }
                  break;
               case 17:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 34)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 62 && kind > 76)
                     kind = 76;
                  break;
               case 4:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 47 && kind > 78)
                     kind = 78;
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 34 && kind > 84)
                     kind = 84;
                  break;
               case 9:
                  if (curChar == 61)
                     jjAddStates(3, 4);
                  break;
               case 11:
                  if (curChar == 62 && kind > 80)
                     kind = 80;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(1);
                  break;
               case 17:
               case 7:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(1);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 17:
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(1);
                  break;
               case 12:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa1_1(0x1000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   13, 14, 15, 10, 11, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec6[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         if ((jjbitVec7[i1] & l1) != 0L)
            if ((jjbitVec8[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\40", "\11", "\12", "\15", "\14", "\144\157", "\146\157\162", 
"\151\156\163\164\141\156\143\145\157\146", "\162\145\164\165\162\156\163", "\156\141\155\145\163\160\141\143\145", 
"\144\145\146\141\165\154\164", "\146\165\156\143\164\151\157\156", "\154\151\163\164", 
"\145\154\145\155\145\156\164", "\141\164\164\162\151\142\165\164\145", "\163\157\162\164\142\171", 
"\157\162", "\142\141\162", "\165\156\151\157\156", "\145\170\143\145\160\164", 
"\156\157\164", "\142\145\146\157\162\145", "\141\146\164\145\162", "\141\163", "\100", 
"\162\141\156\147\145", "\151\146", "\164\150\145\156", "\145\154\163\145", "\151\156", 
"\154\145\164", "\167\150\145\162\145", "\162\145\164\165\162\156", "\156\157\144\145", 
"\164\145\170\164", "\143\157\155\155\145\156\164", 
"\160\162\157\143\145\163\163\151\156\147\137\151\156\163\164\162\165\143\164\151\157\156", "\163\157\155\145", "\145\166\145\162\171", "\143\141\163\164", 
"\164\162\145\141\164", "\141\163\143\145\156\144\151\156\147", 
"\144\145\163\143\145\156\144\151\156\147", "\164\162\165\145", "\146\141\154\163\145", "\141\156\144", 
"\151\156\164\145\162\163\145\143\164", "\144\151\166", "\155\157\144", 
"\144\145\162\145\146\145\162\145\156\143\145", "\164\157", "\163\141\164\151\163\146\151\145\163", "\55", null, null, null, 
"\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", "\56", "\56\56", 
"\42", "\75", "\41\75", "\53", "\52", "\57", "\57\57", "\76", null, "\74", null, null, 
null, "\44", "\72\75", "\134", null, null, null, "\50\72", "\72\51", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_MULTILINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[17];
private final int[] jjstateSet = new int[34];
protected char curChar;
public XQueryParserTokenManager(CharStream stream){
   input_stream = stream;
}
public XQueryParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 89)
       {
          jjmatchedKind = 89;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
