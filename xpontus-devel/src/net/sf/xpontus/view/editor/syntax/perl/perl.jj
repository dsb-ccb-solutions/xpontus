options {
   USER_CHAR_STREAM = true;
	STATIC=false;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(PerlParser)

package net.sf.xpontus.view.editor.syntax.perl;

import java.io.*;
import java.util.*;
import net.sf.xpontus.view.editor.syntax.*;
import net.sf.xpontus.view.editor.*;
import javax.swing.text.Segment;

import java.io.* ;

public class PerlParser implements ILexer{

public PerlParser(){
	this((LexerInputStream)null);
}


    public void ReInit(Reader reader){
        ReInit(new LexerInputStream(reader));
    }
 private List tokens = new ArrayList(); 

    public void switchTo(int newState) {
        this.token_source.SwitchTo(newState);
    }
 public int getLastTokenTypeOnLine(Segment text, int initialTokenType)
    {
        getTokens(text, initialTokenType, 0);

        return ((Token) tokens.get(tokens.size() - 1)).kind;
    }

    public List getTokens(Segment text, int initialTokenType, int startOffset)
    {
        tokens.clear();

        int state = DEFAULT;

       /* switch (initialTokenType)
        {
        case TEXT_IN_COMMENT:
            state = IN_COMMENT;

            break;

        case COMMENT_START:
            state = IN_COMMENT;

            break;

        case TAG_NAME:
            state = IN_TAG_ATTLIST;

            break;

        case GREF_STRING_END:
            state = IN_TAG_ATTLIST;

            break;

        case XML_TARGET:
            state = IN_XML_DECL;

            break;

        case TEXT_IN_GREF_STRING:
            state = IN_GREF_STRING;

            break;

        case GREF_STRING_START:
            state = IN_GREF_STRING;

            break;

        default:
            break;
        }

       */

        try
        {
             ReInit(new LexerInputStream(
                new CharArrayReader(text.array, text.offset, text.count)));
       // this.SwitchTo(state);

        Token currentToken = null;

            while ((currentToken = getNextToken()).kind != PerlParserConstants.EOF)
            {
                tokens.add(currentToken);
            }
        }
        catch (TokenMgrError err)
        {
            tokens.add(new Token(this.token_source.input_stream.GetImage(), initialTokenType));
        }

        if (tokens.size() == 0)
        {

            tokens.add(new Token(""  , initialTokenType));
        }

        return tokens;
    }

    public Object parseStream (java.io.Reader stream) throws ParseException
    {
        ReInit(stream);
        return Expression();
    }
}

PARSER_END(PerlParser)

TOKEN :
{
	" "
|	"\t"
|       "\r"
|       "\n"
|	<"#" (~["\n","\r"])*>
}

TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL: (["+","-"])? ["0"-"9"] (["0"-"9"])* >
|
    < FLOATING_POINT_LITERAL:
        (["+","-"])? (["0"-"9"])+ <DOT> (["0"-"9"])* (<EXPONENT>)?
    |
        (["+","-"])? <DOT> (["0"-"9"])+ (<EXPONENT>)?
    |
        (["+","-"])? (["0"-"9"])+ <EXPONENT>
    >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < STRING_LITERAL:
        "'"
        (
            (~["'","\\","\n","\r"])
        |
            ( "\\"
                (
                    ["\\","'"]
                |
                    ["0"-"7"] ( ["0"-"7"] )?
                |
                    ["0"-"3"] ["0"-"7"] ["0"-"7"]
                )
            )
        )*
        "'"
    >
}

/* RESERVED WORDS */
TOKEN :
{
    < UNDEF:   "undef"   >
}

TOKEN :
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|".")* >
|
    < #LETTER: ["_","a"-"z","A"-"Z"] >
|
    < #DIGIT: ["0"-"9"] >
}

/* OPERATORS */
TOKEN:
{
	< DOT:  "."  >
}

/***************************************************************
GRAMMAR START
***************************************************************/

MethodCall MethodCall() :
{
    String objName, methodName;
    List args;
}
{
    objName=Identifier()
    "->"
    methodName=Identifier()
    args=Array()
    { return new MethodCall(new JavaObject(objName), methodName, args); }
}

Object Expression() :
{
    Object o;
}
{
    o=Array() { return o; }
|
    o=Hash() { return o; }
|
    o=Reference() { return o; }
|
    o=Variable() { return o; }
|
    o=Constant() { return o; }
}

List Array() :
{
    List l = new ArrayList();
    Object o;
}
{
    "["
    (
        "]"
|
        (o=Expression()) { l.add(o); }
        (
            ","
            (o=Expression()) { l.add(o); }
        )*
        "]"
    )
    { return l; }
}

Map Hash() :
{
    Map m = new HashMap();
    Object k, v;
}
{
    "{"
    (
        "}"
    |
        (k=Expression())
        "=>"
        (v=Expression()) { m.put(k, v); }
        (
            ","
            (k=Expression())
            "=>"
            (v=Expression()) { m.put(k, v); }
        )*
        "}"
    )
    { return m; }
}

PerlReference Reference() :
{
    Object o;
}
{
    "\\"
    (o=Expression()) { return new PerlReference(o); }
}

Object Variable() :
{
    String t;
}
{
    "$"
    t=Identifier()
    {
	if (t.startsWith("_JAVA")) {
            return new JavaObject(t.substring(5));
	} else {
            return new PerlObject(t);
	}
    }
}

String Identifier() :
{
    Token t;
}
{
    t=<IDENTIFIER>
    {
        return t.image;
    }
}
 
Object Constant() :
{
    Token t;
    String s;
    int i;
}
{
    <UNDEF>
    {
        return null;
    }
|
    (t=<STRING_LITERAL>)
    {
        s = (t.image).substring(1,t.image.length()-1);
        while ((i = s.indexOf("\\'")) != -1) {
            s = s.substring(0, i) + "'" + s.substring(i+2);
        }
        while ((i = s.indexOf("\\\\")) != -1) {
            s = s.substring(0, i) + "\\" + s.substring(i+2);
        }
        return s;
    }
|
    (t=<INTEGER_LITERAL>)
    {
        try {
            return new Long(t.image);
        } catch (NumberFormatException e) {
            throw new ParseException("Can't parse \"" + t.image + "\"");
        }
    }
|
    (t=<FLOATING_POINT_LITERAL>)
    {
        try {
            return new Double(t.image);
        } catch (NumberFormatException e) {
            throw new ParseException("Can't parse \"" + t.image + "\"");
        }
    }
}
