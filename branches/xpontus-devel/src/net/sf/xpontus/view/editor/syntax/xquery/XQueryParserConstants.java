/* Generated By:JavaCC: Do not edit this line. XQueryParserConstants.java */
package net.sf.xpontus.view.editor.syntax.xquery;

public interface XQueryParserConstants {

  int EOF = 0;
  int DO = 6;
  int FOR = 7;
  int INSTANCEOF = 8;
  int RETURNS = 9;
  int NAMESPACE = 10;
  int DEFAULTT = 11;
  int FUNCTION = 12;
  int LIST = 13;
  int ELEMENT = 14;
  int ATTRIBUTE = 15;
  int SORTBY = 16;
  int OR = 17;
  int BAR = 18;
  int UNION = 19;
  int EXCEPT = 20;
  int NOT = 21;
  int BEFORE = 22;
  int AFTER = 23;
  int AS = 24;
  int AT = 25;
  int RANGE = 26;
  int IF = 27;
  int THEN = 28;
  int ELSE = 29;
  int IN = 30;
  int LET = 31;
  int WHERE = 32;
  int RETURN = 33;
  int NODE = 34;
  int TEXT = 35;
  int COMMENT = 36;
  int PROCESSING_INSTRUCTION = 37;
  int SOME = 38;
  int EVERY = 39;
  int CAST = 40;
  int TREAT = 41;
  int ASCENDING = 42;
  int DESCENDING = 43;
  int TRUE = 44;
  int FALSE = 45;
  int AND = 46;
  int INTERSECT = 47;
  int DIV = 48;
  int MOD = 49;
  int DEREFERENCE = 50;
  int TO = 51;
  int SATISFIES = 52;
  int MINUS = 53;
  int IDENTIFIER = 54;
  int LETTER = 55;
  int DIGIT = 56;
  int L_PAREN = 57;
  int R_PAREN = 58;
  int L_BRACE = 59;
  int R_BRACE = 60;
  int L_BRACKET = 61;
  int R_BRACKET = 62;
  int SEMICOLON = 63;
  int COLON = 64;
  int COMMA = 65;
  int DOT = 66;
  int DOTDOT = 67;
  int APOSTROPH = 68;
  int EQUALS = 69;
  int NOT_EQUALS = 70;
  int PLUS = 71;
  int STAR = 72;
  int SLASH = 73;
  int SLASHSLASH = 74;
  int GREATER_THAN = 75;
  int SLASH_GREATER_THAN = 76;
  int LESS_THAN = 77;
  int LESS_THAN_SLASH = 78;
  int LESS_THAN_EQUALS = 79;
  int GREATER_THAN_EQUALS = 80;
  int DOLLAR = 81;
  int SET_EQUAL_TO = 82;
  int LEFT_SLASH = 83;
  int STRING = 84;
  int INTEGER = 85;
  int FLOAT = 86;
  int START_MULTILINE_COMMENT = 87;
  int END_MULTILINE_COMMENT = 88;
  int MULTILINE_COMMENT_CHAR = 89;

  int DEFAULT = 0;
  int IN_MULTILINE_COMMENT = 1;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"do\"",
    "\"for\"",
    "\"instanceof\"",
    "\"returns\"",
    "\"namespace\"",
    "\"default\"",
    "\"function\"",
    "\"list\"",
    "\"element\"",
    "\"attribute\"",
    "\"sortby\"",
    "\"or\"",
    "\"bar\"",
    "\"union\"",
    "\"except\"",
    "\"not\"",
    "\"before\"",
    "\"after\"",
    "\"as\"",
    "\"@\"",
    "\"range\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"in\"",
    "\"let\"",
    "\"where\"",
    "\"return\"",
    "\"node\"",
    "\"text\"",
    "\"comment\"",
    "\"processing_instruction\"",
    "\"some\"",
    "\"every\"",
    "\"cast\"",
    "\"treat\"",
    "\"ascending\"",
    "\"descending\"",
    "\"true\"",
    "\"false\"",
    "\"and\"",
    "\"intersect\"",
    "\"div\"",
    "\"mod\"",
    "\"dereference\"",
    "\"to\"",
    "\"satisfies\"",
    "\"-\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"..\"",
    "\"\\\"\"",
    "\"=\"",
    "\"!=\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"//\"",
    "\">\"",
    "<SLASH_GREATER_THAN>",
    "\"<\"",
    "<LESS_THAN_SLASH>",
    "<LESS_THAN_EQUALS>",
    "<GREATER_THAN_EQUALS>",
    "\"$\"",
    "\":=\"",
    "\"\\\\\"",
    "<STRING>",
    "<INTEGER>",
    "<FLOAT>",
    "\"(:\"",
    "\":)\"",
    "<MULTILINE_COMMENT_CHAR>",
  };

}
