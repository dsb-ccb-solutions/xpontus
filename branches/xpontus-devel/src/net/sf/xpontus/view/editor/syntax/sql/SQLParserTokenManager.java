/* Generated By:JavaCC: Do not edit this line. SQLParserTokenManager.java */
package net.sf.xpontus.view.editor.syntax.sql;
import java.io.*;
import java.util.*;
import net.sf.xpontus.view.editor.syntax.*;
import net.sf.xpontus.view.editor.*;
import javax.swing.text.Segment;
import java.io.* ;

public class SQLParserTokenManager implements SQLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x10000L) != 0L)
            return 0;
         if ((active2 & 0x80L) != 0L)
            return 6;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x1fffffffffffffL) != 0L)
         {
            jjmatchedKind = 125;
            return 40;
         }
         if ((active2 & 0x100003000L) != 0L)
            return 41;
         return -1;
      case 1:
         if ((active0 & 0x1fe000100010c000L) != 0L || (active1 & 0x8000001900L) != 0L)
            return 40;
         if ((active0 & 0xe01fffefffef3fe0L) != 0L || (active1 & 0x1fff7fffffe6ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 1;
            }
            return 40;
         }
         return -1;
      case 2:
         if ((active0 & 0xef9f7f6fffef04c0L) != 0L || (active1 & 0x1ff776eeffb6efL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0x80800000bb20L) != 0L || (active1 & 0x80911004010L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0x279a6f4bdfcf07c0L) != 0L || (active1 & 0x137736ee9fb0aaL) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
            return 40;
         }
         if ((active0 & 0xc805102420200000L) != 0L || (active1 & 0xc804000600645L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0x7120f0bdf8e07c0L) != 0L || (active1 & 0x7504ee8ba0a8L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
            return 40;
         }
         if ((active0 & 0x2088604000410000L) != 0L || (active1 & 0x13023200141002L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x6020709ce8e0780L) != 0L || (active1 & 0x61046c098008L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 5;
            return 40;
         }
         if ((active0 & 0x110080211000040L) != 0L || (active1 & 0x1400828220a0L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 6;
            }
            return 4;
         }
         if ((active0 & 0x402070804000500L) != 0L || (active1 & 0x10428090000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 6;
            }
            return 40;
         }
         if ((active0 & 0x2000001ca8a0280L) != 0L || (active1 & 0x600044008008L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active1 & 0x200000000000L) != 0L)
            return 4;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
            return 4;
         }
         if ((active0 & 0x400070000000500L) != 0L || (active1 & 0x10020080000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active0 & 0x2000804000000L) != 0L || (active1 & 0x408010000L) != 0L)
            return 40;
         return -1;
      case 8:
         if ((active0 & 0x500L) != 0L || (active1 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 8;
            }
            return 40;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 125;
               jjmatchedPos = 8;
            }
            return 4;
         }
         if ((active0 & 0x400070000000000L) != 0L || (active1 & 0x20080000L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active0 & 0x20000040000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 9;
            return 4;
         }
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0x500L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active1 & 0x10000000000L) != 0L)
            return 40;
         if ((active0 & 0x20000040000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 10;
            return 4;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000040000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000040000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 12;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 35:
         return jjStopAtPos(0, 154);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1e00300L);
      case 40:
         return jjStopAtPos(0, 132);
      case 41:
         return jjStopAtPos(0, 133);
      case 42:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 43:
         return jjStopAtPos(0, 143);
      case 44:
         return jjStopAtPos(0, 134);
      case 45:
         return jjStartNfaWithStates_0(0, 144, 0);
      case 46:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100002000L);
      case 47:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 59:
         return jjStopAtPos(0, 131);
      case 60:
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x88000400L);
      case 61:
         return jjStopAtPos(0, 142);
      case 62:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000800L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xf020L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1f0000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1fe00440L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1fe0000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1fe000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e00000000200L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1fe0000000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x1L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf8L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7f00L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80L, 0xf8000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x1ff00000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fe0000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f800000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         break;
      case 46:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         break;
      case 60:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 61:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      case 62:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000020000000L, active1, 0x702020108008L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20002007c0030900L, active1, 0x1c7e00000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 40);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x3804200000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000800040000L, active1, 0x4000000000002L, active2, 0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x406000400020L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xf80008000003000L, active1, 0x20000000200L, active2, 0x400000L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 40);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 103, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x8004800007880600L, active1, 0x8000018010035L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000400L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x90000000000c0L, active1, 0x100100000e1000L, active2, 0x1000200L);
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x80000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000002000L, active2, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000018000000L, active1, 0x40c0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f0000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 40);
         break;
      case 124:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x11600620000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000700c0000000L, active1, 0x808000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 40);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x40000001004L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0x1804000000400L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000100L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x40000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000080L, active1, 0x12020000140000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 40);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x100088000240L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000L, active1, 0x80L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000006040400L, active1, 0x2L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x9400000480000L, active1, 0x80001L, active2, 0x1600200L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18000200L, active1, 0x8600000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100006c00000000L, active1, 0x10000L, active2, 0x800000L);
      case 84:
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 40);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 40);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0xe04200020020000L, active1, 0x4000002000008L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000000000000L, active1, 0x24000000L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 40);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400100040040L, active1, 0x40000000020L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000000000L, active1, 0x600000080000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 40);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 40);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 40);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 40);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x2780030200000300L, active1, 0xa4003000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 40);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10004040010000L, active1, 0x10000L, active2, 0L);
      case 75:
      case 107:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 40);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 40);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x40080080000L, active1, 0x2002408000000L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800080L, active1, 0x40000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 40);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 40);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x10000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 40);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000840000L, active2, 0x800000L);
      case 80:
      case 112:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0x1001200000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80014400400L, active1, 0x100000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x10000000000000L, active2, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x10000200000aL, active2, 0x200000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L, active2, 0x1000200L);
      case 89:
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000080L, active1, 0x8000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 40);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 40);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 40);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 40);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 40);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 113, 40);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 40);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(4, 136);
         return jjMoveStringLiteralDfa5_0(active0, 0xa8a0000L, active1, 0x100040080080L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x801000200L, active1, 0x20L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 40);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0x20000000L, active2, 0x800000L);
      case 82:
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 40);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000040100L, active1, 0x6802008L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 40);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x2080204000440L, active1, 0x40000010000L, active2, 0x200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40100000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x44080000L, active1, 0x610008000008L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 40);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(5, 149);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 40);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 40);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000020100L, active1, 0L, active2, 0x800000L);
      case 71:
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0x8000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0x400010000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x808800000L, active1, 0x40000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L, active2, 0x1400000L);
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 40);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000480L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 40);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 40);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x400040000000000L, active1, 0x4000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 40);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 40);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 40);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L, active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x10008000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 40);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 40);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x70000000000L, active1, 0x20000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 40);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 40);
         break;
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 40);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 40);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 40);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(6, 151);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000100L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 40);
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 40);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 40);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 40);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 40);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 40);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L, active2, 0x1400000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 4);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000100L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 40);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(7, 137);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40400L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 40);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0x1400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 40);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 40);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(8, 150);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 40);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x20000040400L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 40);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 40);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 152);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 40);
         break;
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 10, 40);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 104, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 18, 4);
         break;
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 41, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(20, 30);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(12, 13);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAdd(30);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 40:
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(4);
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjAddStates(7, 8);
                  break;
               case 8:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar != 39)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 15:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 130)
                     kind = 130;
                  break;
               case 19:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(20, 30);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(11, 13);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(0, 6);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(32, 21);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(14, 16);
                  break;
               case 34:
                  if (curChar == 46)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(35, 21);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                     jjCheckNAdd(4);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                     jjCheckNAddTwoStates(3, 4);
                  }
                  break;
               case 1:
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 15:
                  jjCheckNAddTwoStates(15, 13);
                  break;
               case 17:
                  jjAddStates(20, 21);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(22, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 13);
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x800000000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   32, 33, 34, 21, 36, 37, 39, 7, 8, 23, 25, 26, 27, 28, 33, 34, 
   21, 6, 7, 8, 17, 18, 22, 23, 25, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\40", "\11", "\15", "\12", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\57\52", 
"\52\57", null, null, null, null, null, null, null, "\73", "\50", "\51", "\54", 
"\72\75", null, null, "\74\74", "\76\76", "\56", "\56\56", "\75", "\53", "\55", 
"\174\174", "\52", "\57", "\52\52", null, null, null, null, "\41\75", "\43", "\74\76", 
"\76", "\76\75", "\74", "\74\75", "\56\52", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_MULTILINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[40];
private final int[] jjstateSet = new int[80];
protected char curChar;
public SQLParserTokenManager(CharStream stream){
   input_stream = stream;
}
public SQLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 124)
       {
          jjmatchedKind = 124;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
