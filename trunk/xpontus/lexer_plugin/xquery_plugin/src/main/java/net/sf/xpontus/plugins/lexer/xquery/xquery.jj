/**
 *
   Xquery parser; 1.26.2001
 *
 */
options {
    USER_CHAR_STREAM = true;
    UNICODE_INPUT = true;   
    STATIC = false; 
    LOOKAHEAD = 1;
}

PARSER_BEGIN(XQueryParser)

package net.sf.xpontus.view.editor.syntax.xquery;

import java.io.*;
import java.util.*;
import net.sf.xpontus.view.editor.syntax.*;
import net.sf.xpontus.view.editor.*;
import javax.swing.text.Segment;

public  class XQueryParser implements ILexer{
   public XQueryParser(){
        this((LexerInputStream)null);
    }

    public void ReInit(Reader reader){
        ReInit(new LexerInputStream(reader));
    }

    private List tokens = new ArrayList(); 

    public int getLastTokenTypeOnLine(Segment text, int initialTokenType)
    {
        getTokens(text, initialTokenType, 0);

        return ((Token) tokens.get(tokens.size() - 1)).kind;
    }

     public List getTokens(Segment text, int initialTokenType, int startOffset)
    {
        tokens.clear();

        int state = DEFAULT;

        switch (initialTokenType)
        {
        case START_MULTILINE_COMMENT:
            state = IN_MULTILINE_COMMENT;

            break;

        case MULTILINE_COMMENT_CHAR:
           state = IN_MULTILINE_COMMENT;

            break;

        default:
            break;
        }

        try
        {
            Reader reader = new CharArrayReader(text.array, text.offset, text.count);
            ReInit(new LexerInputStream(reader));
            this.token_source.SwitchTo(state);

            Token currentToken = null;

            while ((currentToken = getNextToken()).kind != XQueryParserConstants.EOF)
            {
                tokens.add(currentToken);
            }
        }
        catch (TokenMgrError err)
        {
            tokens.add(new Token(this.token_source.input_stream.GetImage(), initialTokenType));
        }

        if (tokens.size() == 0)
        {
            tokens.add(new Token("", initialTokenType));
        }

        return tokens;
    }
}
 
PARSER_END(XQueryParser)
 
 
  
   
  
  TOKEN :
  { " " | "\t" | "\n" | "\r" | "\f" }
  
  
  
   /* RESERVED WORDS AND LITERALS */
  
  TOKEN : {
    
    < DO: "do" >
  | < FOR: "for" >
  | < INSTANCEOF: "instanceof" >
  | < RETURNS: "returns" >
  | < NAMESPACE: "namespace" >
  | < DEFAULTT: "default" >
  | < FUNCTION: "function" >
  | < LIST: "list" >
  | < ELEMENT: "element" >
  | < ATTRIBUTE: "attribute" >
  | < SORTBY: "sortby" >
  | < OR: "or" >
  | < BAR: "bar" >
  | < UNION: "union">
  | < EXCEPT: "except" >
  | < NOT: "not" >
  | < BEFORE: "before" >
  | < AFTER: "after" >
  | < AS: "as" >
  | < AT: "@" >
  | < RANGE: "range" >
  | < IF: "if" >
  | < THEN: "then" >
  | < ELSE: "else" >
  | < IN: "in" >
  | < LET: "let" >
  | < WHERE: "where" >
  | < RETURN: "return" >
  | < NODE: "node" >
  | < TEXT: "text" >
  | < COMMENT: "comment" >
  | < PROCESSING_INSTRUCTION: "processing_instruction" >
  | < SOME: "some" >
  | < EVERY: "every" >
  | < CAST: "cast" >
  | < TREAT: "treat" >
  | < ASCENDING: "ascending" >
  | < DESCENDING: "descending" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < AND: "and" >
  | < INTERSECT: "intersect" >
  | < DIV: "div" >
  | < MOD: "mod" >
  | < DEREFERENCE: "dereference" >
  | < TO: "to" >
  | < SATISFIES: "satisfies" >
  | < MINUS: "-" > 
  }

 

  /* IDENTIFIERS */

  TOKEN : {
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
  |
    < #LETTER:
        [
         
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u00ff",
         "\u0100"-"\u1fff",
         "\u3040"-"\u318f",
         "\u3300"-"\u337f",
         "\u3400"-"\u3d2d",
         "\u4e00"-"\u9fff",
         "\uf900"-"\ufaff"
         
        ] | <MINUS>
    >
  |
    < #DIGIT:
        [
         "0"-"9",
         "\u0660"-"\u0669",
         "\u06f0"-"\u06f9",
         "\u0966"-"\u096f",
         "\u09e6"-"\u09ef",
         "\u0a66"-"\u0a6f",
         "\u0ae6"-"\u0aef",
         "\u0b66"-"\u0b6f",
         "\u0be7"-"\u0bef",
         "\u0c66"-"\u0c6f",
         "\u0ce6"-"\u0cef",
         "\u0d66"-"\u0d6f",
         "\u0e50"-"\u0e59",
         "\u0ed0"-"\u0ed9",
         "\u1040"-"\u1049"
        ]
    >
   
  }

  /* SEPARATORS */

  TOKEN : {
    < L_PAREN: "(" >
  | < R_PAREN: ")" >
  | < L_BRACE: "{" >
  | < R_BRACE: "}" >
  | < L_BRACKET: "[" >
  | < R_BRACKET: "]" >
  | < SEMICOLON: ";" >
  | < COLON: ":" >
  | < COMMA: "," >
  | < DOT: "." >
  | < DOTDOT: ".." >
  | < APOSTROPH: "\"" >
  }

  /* OPERATORS */

  TOKEN : {
    < EQUALS: "=" >
  | < NOT_EQUALS: "!=" >
  | < PLUS: "+" >
  | < STAR: "*" >
  | < SLASH: "/" >
  | < SLASHSLASH: "//" >
  | < GREATER_THAN: ">" >
  | < SLASH_GREATER_THAN: <SLASH> <GREATER_THAN> >
  | < LESS_THAN: "<" >
  | < LESS_THAN_SLASH: <LESS_THAN> <SLASH> >
  | < LESS_THAN_EQUALS: <EQUALS> <LESS_THAN> >
  | < GREATER_THAN_EQUALS: <EQUALS> <GREATER_THAN> >
  | < DOLLAR: "$" >
  | < SET_EQUAL_TO: ":=" > 
  | < LEFT_SLASH: "\\" >
  }

/* STRING */

TOKEN : 
{  < STRING: <APOSTROPH> (<LETTER>|<DIGIT>|<LEFT_SLASH> | <DOT> | <COLON> )* <APOSTROPH> > 
 | < INTEGER:  <DIGIT> (<DIGIT>)* >
 | < FLOAT: <INTEGER> <DOT> <INTEGER> >
}

<DEFAULT>
TOKEN:
{
   <START_MULTILINE_COMMENT: ("(:")> : IN_MULTILINE_COMMENT
} 

<IN_MULTILINE_COMMENT> TOKEN:
{
    <END_MULTILINE_COMMENT: ":)"> : DEFAULT
  | <MULTILINE_COMMENT_CHAR: ~[] > 
}

 
 
