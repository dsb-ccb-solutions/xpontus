/*
 * FindReplaceDialog.java
 *
 * Created on 17-Aug-2007, 5:20:50 PM
 *
 *
 * Copyright (C) 2005-2008 Yves Zoundi
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */
package net.sf.xpontus.modules.gui.components;

import net.sf.xpontus.utils.XPontusComponentsUtils;

import java.awt.Frame;

import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;


/**
 * Class description
 * @version 0.0.1
 * @author Yves Zoundi
 */
public class FindReplaceDialog extends javax.swing.JDialog {
    private static FindReplaceDialog findReplaceDialog = null;
    private JTextComponent textArea = null;
    private javax.swing.JRadioButton backwardsRadio;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JCheckBox caseSensitiveBox;
    private javax.swing.JButton closeButton;
    private javax.swing.ButtonGroup directionButtonGroup;
    private javax.swing.JPanel directionPanel;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel findLabel;
    private javax.swing.JTextField findText;
    private javax.swing.JRadioButton forwardsRadio;
    private javax.swing.JButton replaceButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton replaceAllButton;
    private javax.swing.JButton replaceFindButton;
    private javax.swing.JLabel replaceLabel;
    private javax.swing.JTextField replaceText;
    private javax.swing.JCheckBox wrapSearchBox;

    /** Creates new form FindReplaceDialog
     * @param parent
     */
    public FindReplaceDialog(Frame parent) {
        super(parent);
        initComponents();
    }

    public FindReplaceDialog() {
        this((Frame) XPontusComponentsUtils.getTopComponent()
                                           .getDisplayComponent());
    }

    public static void showFindReplace() {
        JTextComponent textComponent = DefaultXPontusWindowImpl.getInstance()
                                                               .getDocumentTabContainer()
                                                               .getCurrentEditor();

        if (findReplaceDialog == null) {
            Frame root = (Frame) SwingUtilities.getRoot(textComponent);
            findReplaceDialog = new FindReplaceDialog(root);
            findReplaceDialog.setLocationRelativeTo(root);
        }

        findReplaceDialog.setTextArea(textComponent);

        textComponent.requestFocus();

        String selectedText = textComponent.getSelectedText();

        if (selectedText != null) {
            findReplaceDialog.setInititalSearchText(selectedText);
        }

        findReplaceDialog.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        directionButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        findLabel = new javax.swing.JLabel();
        findText = new javax.swing.JTextField();
        replaceLabel = new javax.swing.JLabel();
        replaceText = new javax.swing.JTextField();
        directionPanel = new javax.swing.JPanel();
        forwardsRadio = new javax.swing.JRadioButton();
        backwardsRadio = new javax.swing.JRadioButton();
        optionsPanel = new javax.swing.JPanel();
        wrapSearchBox = new javax.swing.JCheckBox();
        caseSensitiveBox = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        replaceFindButton = new javax.swing.JButton();
        replaceButton = new javax.swing.JButton();
        replaceAllButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setTitle("Find and Replace");
        setName("Find and Replace");
        setResizable(false);
        mainPanel.setLayout(new java.awt.GridBagLayout());

        mainPanel.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(5, 5, 5, 5)));
        findLabel.setText("Find:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        mainPanel.add(findLabel, gridBagConstraints);

        findText.setPreferredSize(new java.awt.Dimension(200, 19));
        findText.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    findTextActionPerformed(evt);
                }
            });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        mainPanel.add(findText, gridBagConstraints);

        replaceLabel.setText("Replace:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        mainPanel.add(replaceLabel, gridBagConstraints);

        replaceText.setPreferredSize(new java.awt.Dimension(200, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mainPanel.add(replaceText, gridBagConstraints);

        directionPanel.setLayout(new java.awt.GridLayout(2, 0));

        directionPanel.setBorder(new javax.swing.border.TitledBorder(
                "Direction"));
        directionButtonGroup.add(forwardsRadio);
        forwardsRadio.setSelected(true);
        forwardsRadio.setText("Forwards");
        directionPanel.add(forwardsRadio);

        directionButtonGroup.add(backwardsRadio);
        backwardsRadio.setText("Backwards");
        directionPanel.add(backwardsRadio);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mainPanel.add(directionPanel, gridBagConstraints);

        optionsPanel.setLayout(new java.awt.GridLayout(2, 0));

        optionsPanel.setBorder(new javax.swing.border.TitledBorder("Options"));
        wrapSearchBox.setSelected(true);
        wrapSearchBox.setText("Wrap Search");
        optionsPanel.add(wrapSearchBox);

        caseSensitiveBox.setText("Case Sensitive");
        optionsPanel.add(caseSensitiveBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mainPanel.add(optionsPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(2, 0));

        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    findText(evt);
                }
            });

        buttonPanel.add(findButton);

        replaceFindButton.setText("Replace and Find");
        replaceFindButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    replaceAndFind(evt);
                }
            });

        buttonPanel.add(replaceFindButton);

        replaceButton.setText("Replace");
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    replaceText(evt);
                }
            });

        buttonPanel.add(replaceButton);

        replaceAllButton.setText("Replace All");
        replaceAllButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    replaceAll(evt);
                }
            });

        buttonPanel.add(replaceAllButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        mainPanel.add(buttonPanel, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    closeFindReplaceDialog(evt);
                }
            });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        mainPanel.add(closeButton, gridBagConstraints);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }

    private void findTextActionPerformed(java.awt.event.ActionEvent evt) {
        findText(null);
    }

    private void closeFindReplaceDialog(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
    }

    private int findText(java.awt.event.ActionEvent evt) {
        String searchText = findText.getText();

        if ((textArea == null) || (searchText.length() == 0)) {
            return -1;
        }

        String text = textArea.getText();

        if (!caseSensitiveBox.isSelected()) {
            searchText = searchText.toLowerCase();
            text = text.toLowerCase();
        }

        int startIndex = textArea.getCaretPosition();

        if (forwardsRadio.isSelected()) {
            int start = textArea.getSelectionStart();
            int end = textArea.getSelectionEnd();

            if (start != end) {
                startIndex = end;
            }

            int index = text.indexOf(searchText, startIndex);

            if (index == -1) {
                if (wrapSearchBox.isSelected()) {
                    startIndex = 0;
                    index = text.indexOf(searchText);
                } else {
                    return -1;
                }
            }

            if (index >= startIndex) {
                textArea.setCaretPosition(index);
                textArea.select(index, index + searchText.length());

                return index;
            }
        } else if (backwardsRadio.isSelected()) {
            int start = textArea.getSelectionStart();
            int end = textArea.getSelectionEnd();

            if (start != end) {
                startIndex = start;
            }

            int index = text.substring(0, startIndex).lastIndexOf(searchText);

            if (index == -1) {
                if (wrapSearchBox.isSelected()) {
                    startIndex = text.length();
                    index = text.lastIndexOf(searchText);
                } else {
                    return -1;
                }
            }

            if ((index <= startIndex) && (index != -1)) {
                textArea.setCaretPosition(index);
                textArea.select(index, index + searchText.length());

                return index;
            }
        }

        return -1;
    }

    private boolean replaceText(java.awt.event.ActionEvent evt) {
        String searchText = findText.getText();

        if ((textArea == null) || (searchText.length() == 0)) {
            return false;
        }

        String selectedText = textArea.getSelectedText();

        if (selectedText == null) {
            return false;
        }

        int start = textArea.getSelectionStart();
        int end = textArea.getSelectionEnd();

        Document doc = textArea.getDocument();

        String replacementText = replaceText.getText();

        try {
            doc.remove(start, end - start);
            doc.insertString(start, replacementText, null);
        } catch (BadLocationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        textArea.select(start, start + replacementText.length());

        return true;
    }

    private void replaceAll(java.awt.event.ActionEvent evt) {
        int startVal = findText(null);

        if (startVal != -1) {
            replaceText(null);
        }

        int start = 0;
        int index;

        int charDiff = replaceText.getText().length() -
            findText.getText().length();

        while (((index = findText(null)) != -1) &&
                (index != (start + startVal))) {
            replaceText(null);

            if (index < startVal) {
                start += charDiff;
            }
        }
    }

    private void replaceAndFind(java.awt.event.ActionEvent evt) {
        if (replaceText(null)) {
            findText(null);
        }
    }

    public JTextComponent getTextArea() {
        return textArea;
    }

    public void setTextArea(JTextComponent textArea) {
        this.textArea = textArea;
    }

    public void setInititalSearchText(String text) {
        findText.setText(text);
    }
}
