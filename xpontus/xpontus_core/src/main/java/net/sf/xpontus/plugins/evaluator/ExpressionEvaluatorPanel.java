/*
 * ExpressionEvaluatorPanel.java
 *
 * Created on December 22, 2007, 2:38 PM
 */
package net.sf.xpontus.plugins.evaluator;

import java.util.Hashtable;
import javax.swing.DefaultComboBoxModel;
import net.sf.xpontus.constants.XPontusConstantsIF;
import net.sf.xpontus.modules.gui.components.DefaultXPontusWindowImpl;
import net.sf.xpontus.modules.gui.components.MessagesWindowDockable;
import net.sf.xpontus.modules.gui.components.OutputDockable;
import net.sf.xpontus.utils.XPontusComponentsUtils;
import org.w3c.dom.NodeList;

/**
 *
 * @author  Yves Zoundi <yveszoundi at users dot sf dot net>
 */
public class ExpressionEvaluatorPanel extends javax.swing.JPanel {

    /** Creates new form ExpressionEvaluatorPanel */
    public ExpressionEvaluatorPanel() {

        initComponents();
        DefaultComboBoxModel mm = (DefaultComboBoxModel) this.engineList.getModel();
        String engines[] = EvaluatorPluginConfiguration.getInstane().getEnginesNames();

        for (int i = 0; i < engines.length; i++) {
            mm.addElement(engines[i]);
        }
        if (mm.getSize() > 0) {
            this.engineList.setSelectedIndex(0);
        }
    }

    public String getExpression() {
        return this.expressionList.getSelectedItem().toString();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        evaluateButton = new javax.swing.JButton();
        expressionList = new javax.swing.JComboBox();
        engineList = new javax.swing.JComboBox();

        evaluateButton.setText("Evaluate");
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        expressionList.setEditable(true);
        expressionList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "//article/text()" }));
        expressionList.setMinimumSize(new java.awt.Dimension(74, 20));
        expressionList.setPreferredSize(new java.awt.Dimension(74, 20));

        engineList.setModel(new DefaultComboBoxModel());
        engineList.setMinimumSize(new java.awt.Dimension(74, 20));
        engineList.setPreferredSize(new java.awt.Dimension(74, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(evaluateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expressionList, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(engineList, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(evaluateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(engineList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(expressionList, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed

        Thread m_worker = new Thread() {

            public void run() {
                Hashtable t = (Hashtable) EvaluatorPluginConfiguration.getInstane().getEngines().get(engineList.getSelectedItem());

                if (t == null) {
                    XPontusComponentsUtils.showErrorMessage("No plugins installed for that action");
                    evaluateButton.setEnabled(false);
                    engineList.setEnabled(false);
                    expressionList.setEnabled(false);
                    return;
                }

                ClassLoader loader = (ClassLoader) t.get(XPontusConstantsIF.CLASS_LOADER);
                String classname = t.get(XPontusConstantsIF.OBJECT_CLASSNAME).toString();
                try {
                    EvaluatorPluginIF plugin = (EvaluatorPluginIF) Class.forName(classname, true, loader).newInstance();
                    Object[] li = plugin.handle(getExpression());
                    XPathResultsDockable dockable = (XPathResultsDockable) DefaultXPontusWindowImpl.getInstance().getConsole().getDockableById(XPathResultsDockable.DOCKABLE_ID);
                    if (li != null) {
                        NodeList nl = (NodeList) li[0];
                        DOMAddLines dm = (DOMAddLines) li[1];
                        dockable.setResultsModel(new XPathResultsTableModel(nl, dm));
                        DefaultXPontusWindowImpl.getInstance().getConsole().setFocus(XPathResultsDockable.DOCKABLE_ID);
                    } else { 
                        DefaultXPontusWindowImpl.getInstance().getConsole().getDockableById(MessagesWindowDockable.DOCKABLE_ID).println("No results");
                        DefaultXPontusWindowImpl.getInstance().getConsole().setFocus(MessagesWindowDockable.DOCKABLE_ID);
                    }
                } catch (Exception e) {
                     DefaultXPontusWindowImpl.getInstance().getConsole().getDockableById(MessagesWindowDockable.DOCKABLE_ID).println("Error:\n" + e.getMessage() , OutputDockable.RED_STYLE);
                        DefaultXPontusWindowImpl.getInstance().getConsole().setFocus(MessagesWindowDockable.DOCKABLE_ID);
                }
            }
        };
        m_worker.start();
        
    }//GEN-LAST:event_evaluateButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox engineList;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JComboBox expressionList;
    // End of variables declaration//GEN-END:variables
}
