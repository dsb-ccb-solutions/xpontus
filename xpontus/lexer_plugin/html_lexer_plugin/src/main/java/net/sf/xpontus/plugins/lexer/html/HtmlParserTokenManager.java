/* Generated By:JavaCC: Do not edit this line. HtmlParserTokenManager.java */
package net.sf.xpontus.plugins.lexer.html;

import net.sf.xpontus.syntax.*;

import java.io.*;

import java.util.*;

import javax.swing.text.Segment;


public class HtmlParserTokenManager implements HtmlParserConstants
{
    static final long[] jjbitVec0 = 
        {
            0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL
        };
    static final long[] jjbitVec2 = 
        {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
        };
    static final int[] jjnextStates = 
        {
            0, 2, 3, 3, 4, 6, 7, 5, 6, 8, 9, 0, 1, 4, 2, 3, 12, 15,
        };
    public static final String[] jjstrLiteralImages = 
        {
            "", null, null, null, null, null, null, null, null, null, null, null,
            "\74", "\74\57", "\74\41\55\55", "\74\41", null, null, null, null,
            null, null, null, "\76", "\57\76", "\75", "\74", null, null, null,
            null, null, "\55", null, null, null, "\76", null, null, null, "\74",
            null,
        };
    public static final String[] lexStateNames = 
        {
            "LexStyle", "LexScript", "LexDecl", "LexComment", "LexAttrVal",
            "LexInTag", "LexStartTag", "DEFAULT",
        };
    public static final int[] jjnewLexState = 
        {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 6, 3, 2, -1, 5, 5,
            5, 7, -1, -1, 7, 7, 4, 6, -1, -1, 5, -1, 7, -1, -1, -1, -1, 7, 7, 7,
            -1, -1, -1,
        };
    public java.io.PrintStream debugStream = System.out;
    protected CharStream input_stream;
    private final int[] jjrounds = new int[16];
    private final int[] jjstateSet = new int[32];
    StringBuffer image;
    int jjimageLen;
    int lengthOfMatch;
    protected char curChar;
    int curLexState = 7;
    int defaultLexState = 7;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public HtmlParserTokenManager(CharStream stream)
    {
        input_stream = stream;
    }

    public HtmlParserTokenManager(CharStream stream, int lexState)
    {
        this(stream);
        SwitchTo(lexState);
    }

    public void setDebugStream(java.io.PrintStream ds)
    {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_7(int pos, long active0)
    {
        switch (pos)
        {
        default:
            return -1;
        }
    }

    private final int jjStartNfa_7(int pos, long active0)
    {
        return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        return pos + 1;
    }

    private final int jjStartNfaWithStates_7(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_7(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_7()
    {
        switch (curChar)
        {
        case 60:
            jjmatchedKind = 12;

            return jjMoveStringLiteralDfa1_7(0xe000L);

        default:
            return jjMoveNfa_7(5, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_7(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_7(0, active0);

            return 1;
        }

        switch (curChar)
        {
        case 33:

            if ((active0 & 0x8000L) != 0L)
            {
                jjmatchedKind = 15;
                jjmatchedPos = 1;
            }

            return jjMoveStringLiteralDfa2_7(active0, 0x4000L);

        case 47:

            if ((active0 & 0x2000L) != 0L)
            {
                return jjStopAtPos(1, 13);
            }

            break;

        default:
            break;
        }

        return jjStartNfa_7(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_7(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_7(0, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_7(1, active0);

            return 2;
        }

        switch (curChar)
        {
        case 45:
            return jjMoveStringLiteralDfa3_7(active0, 0x4000L);

        default:
            break;
        }

        return jjStartNfa_7(1, active0);
    }

    private final int jjMoveStringLiteralDfa3_7(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_7(1, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_7(2, active0);

            return 3;
        }

        switch (curChar)
        {
        case 45:

            if ((active0 & 0x4000L) != 0L)
            {
                return jjStopAtPos(3, 14);
            }

            break;

        default:
            break;
        }

        return jjStartNfa_7(2, active0);
    }

    private final void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end)
    {
        do
        {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        }
        while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end)
    {
        do
        {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++ != end);
    }

    private final void jjCheckNAddStates(int start)
    {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    private final int jjMoveNfa_7(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 5;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 5:

                        if ((0xefffffffffffdbffL & l) != 0L)
                        {
                            if (kind > 16)
                            {
                                kind = 16;
                            }

                            jjCheckNAdd(4);
                        }
                        else if ((0x2400L & l) != 0L)
                        {
                            if (kind > 11)
                            {
                                kind = 11;
                            }
                        }

                        if ((0x100000200L & l) != 0L)
                        {
                            jjCheckNAddStates(0, 2);
                        }
                        else if (curChar == 13)
                        {
                            jjstateSet[jjnewStateCnt++] = 1;
                        }

                        break;

                    case 0:

                        if ((0x100000200L & l) != 0L)
                        {
                            jjCheckNAddStates(0, 2);
                        }

                        break;

                    case 1:

                        if ((curChar == 10) && (kind > 11))
                        {
                            kind = 11;
                        }

                        break;

                    case 2:

                        if (curChar == 13)
                        {
                            jjstateSet[jjnewStateCnt++] = 1;
                        }

                        break;

                    case 3:

                        if (((0x2400L & l) != 0L) && (kind > 11))
                        {
                            kind = 11;
                        }

                        break;

                    case 4:

                        if ((0xefffffffffffdbffL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 16)
                        {
                            kind = 16;
                        }

                        jjCheckNAdd(4);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 5:
                    case 4:
                        kind = 16;
                        jjCheckNAdd(4);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 5:
                    case 4:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            break;
                        }

                        if (kind > 16)
                        {
                            kind = 16;
                        }

                        jjCheckNAdd(4);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 5 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_5(int pos, long active0)
    {
        switch (pos)
        {
        default:
            return -1;
        }
    }

    private final int jjStartNfa_5(int pos, long active0)
    {
        return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_5(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_5(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_5()
    {
        switch (curChar)
        {
        case 47:
            return jjMoveStringLiteralDfa1_5(0x1000000L);

        case 60:
            return jjStopAtPos(0, 26);

        case 61:
            return jjStopAtPos(0, 25);

        case 62:
            return jjStopAtPos(0, 23);

        default:
            return jjMoveNfa_5(1, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_5(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_5(0, active0);

            return 1;
        }

        switch (curChar)
        {
        case 62:

            if ((active0 & 0x1000000L) != 0L)
            {
                return jjStopAtPos(1, 24);
            }

            break;

        default:
            break;
        }

        return jjStartNfa_5(0, active0);
    }

    private final int jjMoveNfa_5(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 3;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 0:

                        if ((0x100002600L & l) == 0L)
                        {
                            break;
                        }

                        kind = 21;
                        jjCheckNAdd(0);

                        break;

                    case 2:

                        if ((0x7ff600000000000L & l) == 0L)
                        {
                            break;
                        }

                        kind = 22;
                        jjstateSet[jjnewStateCnt++] = 2;

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:

                        if ((0x7fffffe07fffffeL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 22)
                        {
                            kind = 22;
                        }

                        jjCheckNAdd(2);

                        break;

                    case 2:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 22)
                        {
                            kind = 22;
                        }

                        jjCheckNAdd(2);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 3 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjMoveStringLiteralDfa0_4()
    {
        return jjMoveNfa_4(0, 0);
    }

    private final int jjMoveNfa_4(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 8;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 0:

                        if ((0xbfffff7affffd9ffL & l) != 0L)
                        {
                            if (kind > 29)
                            {
                                kind = 29;
                            }

                            jjCheckNAdd(1);
                        }
                        else if ((0x100002600L & l) != 0L)
                        {
                            if (kind > 28)
                            {
                                kind = 28;
                            }
                        }
                        else if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(6, 7);
                        }
                        else if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(3, 4);
                        }

                        break;

                    case 1:

                        if ((0xbfffff7affffd9ffL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 29)
                        {
                            kind = 29;
                        }

                        jjCheckNAdd(1);

                        break;

                    case 2:

                        if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(3, 4);
                        }

                        break;

                    case 3:

                        if ((0xfffffffbffffffffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(3, 4);
                        }

                        break;

                    case 4:

                        if ((curChar == 34) && (kind > 29))
                        {
                            kind = 29;
                        }

                        break;

                    case 5:

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(6, 7);
                        }

                        break;

                    case 6:

                        if ((0xffffff7fffffffffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(6, 7);
                        }

                        break;

                    case 7:

                        if ((curChar == 39) && (kind > 29))
                        {
                            kind = 29;
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 0:
                    case 1:

                        if (kind > 29)
                        {
                            kind = 29;
                        }

                        jjCheckNAdd(1);

                        break;

                    case 3:
                        jjAddStates(3, 4);

                        break;

                    case 6:
                        jjAddStates(5, 6);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 0:
                    case 1:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            break;
                        }

                        if (kind > 29)
                        {
                            kind = 29;
                        }

                        jjCheckNAdd(1);

                        break;

                    case 3:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(3, 4);
                        }

                        break;

                    case 6:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(5, 6);
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 8 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_6(int pos, long active0)
    {
        switch (pos)
        {
        case 0:

            if ((active0 & 0x60000L) != 0L)
            {
                jjmatchedKind = 19;

                return 1;
            }

            return -1;

        case 1:

            if ((active0 & 0x60000L) != 0L)
            {
                jjmatchedKind = 19;
                jjmatchedPos = 1;

                return 1;
            }

            return -1;

        case 2:

            if ((active0 & 0x60000L) != 0L)
            {
                jjmatchedKind = 19;
                jjmatchedPos = 2;

                return 1;
            }

            return -1;

        case 3:

            if ((active0 & 0x60000L) != 0L)
            {
                jjmatchedKind = 19;
                jjmatchedPos = 3;

                return 1;
            }

            return -1;

        case 4:

            if ((active0 & 0x20000L) != 0L)
            {
                jjmatchedKind = 19;
                jjmatchedPos = 4;

                return 1;
            }

            if ((active0 & 0x40000L) != 0L)
            {
                return 1;
            }

            return -1;

        default:
            return -1;
        }
    }

    private final int jjStartNfa_6(int pos, long active0)
    {
        return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_6(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_6(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_6()
    {
        switch (curChar)
        {
        case 83:
        case 115:
            return jjMoveStringLiteralDfa1_6(0x60000L);

        default:
            return jjMoveNfa_6(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_6(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_6(0, active0);

            return 1;
        }

        switch (curChar)
        {
        case 67:
        case 99:
            return jjMoveStringLiteralDfa2_6(active0, 0x20000L);

        case 84:
        case 116:
            return jjMoveStringLiteralDfa2_6(active0, 0x40000L);

        default:
            break;
        }

        return jjStartNfa_6(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_6(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_6(0, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_6(1, active0);

            return 2;
        }

        switch (curChar)
        {
        case 82:
        case 114:
            return jjMoveStringLiteralDfa3_6(active0, 0x20000L);

        case 89:
        case 121:
            return jjMoveStringLiteralDfa3_6(active0, 0x40000L);

        default:
            break;
        }

        return jjStartNfa_6(1, active0);
    }

    private final int jjMoveStringLiteralDfa3_6(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_6(1, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_6(2, active0);

            return 3;
        }

        switch (curChar)
        {
        case 73:
        case 105:
            return jjMoveStringLiteralDfa4_6(active0, 0x20000L);

        case 76:
        case 108:
            return jjMoveStringLiteralDfa4_6(active0, 0x40000L);

        default:
            break;
        }

        return jjStartNfa_6(2, active0);
    }

    private final int jjMoveStringLiteralDfa4_6(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_6(2, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_6(3, active0);

            return 4;
        }

        switch (curChar)
        {
        case 69:
        case 101:

            if ((active0 & 0x40000L) != 0L)
            {
                return jjStartNfaWithStates_6(4, 18, 1);
            }

            break;

        case 80:
        case 112:
            return jjMoveStringLiteralDfa5_6(active0, 0x20000L);

        default:
            break;
        }

        return jjStartNfa_6(3, active0);
    }

    private final int jjMoveStringLiteralDfa5_6(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_6(3, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_6(4, active0);

            return 5;
        }

        switch (curChar)
        {
        case 84:
        case 116:

            if ((active0 & 0x20000L) != 0L)
            {
                return jjStartNfaWithStates_6(5, 17, 1);
            }

            break;

        default:
            break;
        }

        return jjStartNfa_6(4, active0);
    }

    private final int jjMoveNfa_6(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 2;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:

                        if ((0x7ff600000000000L & l) == 0L)
                        {
                            break;
                        }

                        kind = 19;
                        jjstateSet[jjnewStateCnt++] = 1;

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 0:

                        if ((0x7fffffe07fffffeL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 19)
                        {
                            kind = 19;
                        }

                        jjCheckNAdd(1);

                        break;

                    case 1:

                        if ((0x7fffffe87fffffeL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 19)
                        {
                            kind = 19;
                        }

                        jjCheckNAdd(1);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 2 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0)
    {
        switch (pos)
        {
        default:
            return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0)
    {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_1(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_1(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_1()
    {
        switch (curChar)
        {
        case 60:
            jjmatchedKind = 40;

            return jjMoveStringLiteralDfa1_1(0x2000000000L);

        default:
            return jjMoveNfa_1(1, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_1(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(0, active0);

            return 1;
        }

        switch (curChar)
        {
        case 47:
            return jjMoveStringLiteralDfa2_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(0, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(1, active0);

            return 2;
        }

        switch (curChar)
        {
        case 83:
        case 115:
            return jjMoveStringLiteralDfa3_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(1, active0);
    }

    private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(1, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(2, active0);

            return 3;
        }

        switch (curChar)
        {
        case 67:
        case 99:
            return jjMoveStringLiteralDfa4_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(2, active0);
    }

    private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(2, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(3, active0);

            return 4;
        }

        switch (curChar)
        {
        case 82:
        case 114:
            return jjMoveStringLiteralDfa5_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(3, active0);
    }

    private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(3, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(4, active0);

            return 5;
        }

        switch (curChar)
        {
        case 73:
        case 105:
            return jjMoveStringLiteralDfa6_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(4, active0);
    }

    private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(4, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(5, active0);

            return 6;
        }

        switch (curChar)
        {
        case 80:
        case 112:
            return jjMoveStringLiteralDfa7_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(5, active0);
    }

    private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(5, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(6, active0);

            return 7;
        }

        switch (curChar)
        {
        case 84:
        case 116:
            return jjMoveStringLiteralDfa8_1(active0, 0x2000000000L);

        default:
            break;
        }

        return jjStartNfa_1(6, active0);
    }

    private final int jjMoveStringLiteralDfa8_1(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_1(6, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_1(7, active0);

            return 8;
        }

        switch (curChar)
        {
        case 62:

            if ((active0 & 0x2000000000L) != 0L)
            {
                return jjStopAtPos(8, 37);
            }

            break;

        default:
            break;
        }

        return jjStartNfa_1(7, active0);
    }

    private final int jjMoveNfa_1(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 11;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:

                        if ((0xefffff7bffffdbffL & l) != 0L)
                        {
                            if (kind > 41)
                            {
                                kind = 41;
                            }

                            jjCheckNAdd(3);
                        }
                        else if ((0x8400000000L & l) != 0L)
                        {
                            if (kind > 41)
                            {
                                kind = 41;
                            }
                        }
                        else if ((0x2400L & l) != 0L)
                        {
                            if (kind > 39)
                            {
                                kind = 39;
                            }
                        }

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        else if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }
                        else if (curChar == 13)
                        {
                            jjstateSet[jjnewStateCnt++] = 0;
                        }

                        break;

                    case 0:

                        if ((curChar == 10) && (kind > 39))
                        {
                            kind = 39;
                        }

                        break;

                    case 2:

                        if (((0x2400L & l) != 0L) && (kind > 39))
                        {
                            kind = 39;
                        }

                        break;

                    case 3:

                        if ((0xefffff7bffffdbffL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 41)
                        {
                            kind = 41;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 4:

                        if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 5:

                        if ((0xfffffffbffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 6:

                        if ((curChar == 34) && (kind > 41))
                        {
                            kind = 41;
                        }

                        break;

                    case 7:

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }

                        break;

                    case 8:

                        if ((0xffffff7fffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }

                        break;

                    case 9:

                        if ((curChar == 39) && (kind > 41))
                        {
                            kind = 41;
                        }

                        break;

                    case 10:

                        if (((0x8400000000L & l) != 0L) && (kind > 41))
                        {
                            kind = 41;
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 3:

                        if (kind > 41)
                        {
                            kind = 41;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 5:
                        jjAddStates(7, 8);

                        break;

                    case 8:
                        jjAddStates(9, 10);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 3:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            break;
                        }

                        if (kind > 41)
                        {
                            kind = 41;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 5:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(7, 8);
                        }

                        break;

                    case 8:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(9, 10);
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 11 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_2(int pos, long active0)
    {
        switch (pos)
        {
        default:
            return -1;
        }
    }

    private final int jjStartNfa_2(int pos, long active0)
    {
        return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_2(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_2(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_2()
    {
        switch (curChar)
        {
        case 62:
            return jjStopAtPos(0, 36);

        default:
            return jjMoveNfa_2(7, 0);
        }
    }

    private final int jjMoveNfa_2(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 7;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 7:

                        if ((0xbfffffffffffffffL & l) != 0L)
                        {
                            if (kind > 35)
                            {
                                kind = 35;
                            }

                            jjCheckNAddStates(11, 13);
                        }

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }
                        else if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }

                        break;

                    case 0:

                        if ((0xbfffffffffffffffL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 35)
                        {
                            kind = 35;
                        }

                        jjCheckNAddStates(11, 13);

                        break;

                    case 1:

                        if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }

                        break;

                    case 2:

                        if ((0xfffffffbffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }

                        break;

                    case 3:

                        if (curChar != 34)
                        {
                            break;
                        }

                        if (kind > 35)
                        {
                            kind = 35;
                        }

                        jjCheckNAddStates(11, 13);

                        break;

                    case 4:

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 5:

                        if ((0xffffff7fffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 6:

                        if (curChar != 39)
                        {
                            break;
                        }

                        if (kind > 35)
                        {
                            kind = 35;
                        }

                        jjCheckNAddStates(11, 13);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 7:
                    case 0:

                        if (kind > 35)
                        {
                            kind = 35;
                        }

                        jjCheckNAddStates(11, 13);

                        break;

                    case 2:
                        jjAddStates(14, 15);

                        break;

                    case 5:
                        jjAddStates(7, 8);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 7:
                    case 0:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            break;
                        }

                        if (kind > 35)
                        {
                            kind = 35;
                        }

                        jjCheckNAddStates(11, 13);

                        break;

                    case 2:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(14, 15);
                        }

                        break;

                    case 5:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(7, 8);
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 7 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0)
    {
        switch (pos)
        {
        default:
            return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0)
    {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0()
    {
        switch (curChar)
        {
        case 60:
            jjmatchedKind = 40;

            return jjMoveStringLiteralDfa1_0(0x4000000000L);

        default:
            return jjMoveNfa_0(1, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(0, active0);

            return 1;
        }

        switch (curChar)
        {
        case 47:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);

        default:
            break;
        }

        return jjStartNfa_0(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_0(0, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(1, active0);

            return 2;
        }

        switch (curChar)
        {
        case 83:
        case 115:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);

        default:
            break;
        }

        return jjStartNfa_0(1, active0);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_0(1, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(2, active0);

            return 3;
        }

        switch (curChar)
        {
        case 84:
        case 116:
            return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);

        default:
            break;
        }

        return jjStartNfa_0(2, active0);
    }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_0(2, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(3, active0);

            return 4;
        }

        switch (curChar)
        {
        case 89:
        case 121:
            return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);

        default:
            break;
        }

        return jjStartNfa_0(3, active0);
    }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_0(3, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(4, active0);

            return 5;
        }

        switch (curChar)
        {
        case 76:
        case 108:
            return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);

        default:
            break;
        }

        return jjStartNfa_0(4, active0);
    }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_0(4, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(5, active0);

            return 6;
        }

        switch (curChar)
        {
        case 69:
        case 101:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);

        default:
            break;
        }

        return jjStartNfa_0(5, active0);
    }

    private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
    {
        if ((active0 &= old0) == 0L)
        {
            return jjStartNfa_0(5, old0);
        }

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(6, active0);

            return 7;
        }

        switch (curChar)
        {
        case 62:

            if ((active0 & 0x4000000000L) != 0L)
            {
                return jjStopAtPos(7, 38);
            }

            break;

        default:
            break;
        }

        return jjStartNfa_0(6, active0);
    }

    private final int jjMoveNfa_0(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 11;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:

                        if ((0xefffff7bffffdbffL & l) != 0L)
                        {
                            if (kind > 41)
                            {
                                kind = 41;
                            }

                            jjCheckNAdd(3);
                        }
                        else if ((0x8400000000L & l) != 0L)
                        {
                            if (kind > 41)
                            {
                                kind = 41;
                            }
                        }
                        else if ((0x2400L & l) != 0L)
                        {
                            if (kind > 39)
                            {
                                kind = 39;
                            }
                        }

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        else if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }
                        else if (curChar == 13)
                        {
                            jjstateSet[jjnewStateCnt++] = 0;
                        }

                        break;

                    case 0:

                        if ((curChar == 10) && (kind > 39))
                        {
                            kind = 39;
                        }

                        break;

                    case 2:

                        if (((0x2400L & l) != 0L) && (kind > 39))
                        {
                            kind = 39;
                        }

                        break;

                    case 3:

                        if ((0xefffff7bffffdbffL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 41)
                        {
                            kind = 41;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 4:

                        if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 5:

                        if ((0xfffffffbffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 6:

                        if ((curChar == 34) && (kind > 41))
                        {
                            kind = 41;
                        }

                        break;

                    case 7:

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }

                        break;

                    case 8:

                        if ((0xffffff7fffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }

                        break;

                    case 9:

                        if ((curChar == 39) && (kind > 41))
                        {
                            kind = 41;
                        }

                        break;

                    case 10:

                        if (((0x8400000000L & l) != 0L) && (kind > 41))
                        {
                            kind = 41;
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 3:

                        if (kind > 41)
                        {
                            kind = 41;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 5:
                        jjAddStates(7, 8);

                        break;

                    case 8:
                        jjAddStates(9, 10);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 3:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            break;
                        }

                        if (kind > 41)
                        {
                            kind = 41;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 5:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(7, 8);
                        }

                        break;

                    case 8:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(9, 10);
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 11 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_3(int pos, long active0)
    {
        switch (pos)
        {
        default:
            return -1;
        }
    }

    private final int jjStartNfa_3(int pos, long active0)
    {
        return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
    }

    private final int jjStartNfaWithStates_3(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;

        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            return pos + 1;
        }

        return jjMoveNfa_3(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_3()
    {
        switch (curChar)
        {
        case 45:
            return jjStartNfaWithStates_3(0, 32, 12);

        default:
            return jjMoveNfa_3(1, 0);
        }
    }

    private final int jjMoveNfa_3(int startState, int curPos)
    {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 16;

        int i = 1;
        jjstateSet[0] = startState;

        int j;
        int kind = 0x7fffffff;

        for (;;)
        {
            if (++jjround == 0x7fffffff)
            {
                ReInitRounds();
            }

            if (curChar < 64)
            {
                long l = 1L << curChar;
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 12:

                        if (curChar == 62)
                        {
                            if (kind > 31)
                            {
                                kind = 31;
                            }
                        }
                        else if (curChar == 45)
                        {
                            jjCheckNAddTwoStates(13, 14);
                        }

                        break;

                    case 1:

                        if ((0xffffdf7bffffdbffL & l) != 0L)
                        {
                            if (kind > 34)
                            {
                                kind = 34;
                            }

                            jjCheckNAdd(3);
                        }
                        else if ((0x8400000000L & l) != 0L)
                        {
                            if (kind > 34)
                            {
                                kind = 34;
                            }
                        }
                        else if ((0x2400L & l) != 0L)
                        {
                            if (kind > 33)
                            {
                                kind = 33;
                            }
                        }
                        else if (curChar == 45)
                        {
                            jjAddStates(16, 17);
                        }

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        else if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }
                        else if (curChar == 13)
                        {
                            jjstateSet[jjnewStateCnt++] = 0;
                        }

                        break;

                    case 0:

                        if ((curChar == 10) && (kind > 33))
                        {
                            kind = 33;
                        }

                        break;

                    case 2:

                        if (((0x2400L & l) != 0L) && (kind > 33))
                        {
                            kind = 33;
                        }

                        break;

                    case 3:

                        if ((0xffffdf7bffffdbffL & l) == 0L)
                        {
                            break;
                        }

                        if (kind > 34)
                        {
                            kind = 34;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 4:

                        if (curChar == 34)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 5:

                        if ((0xfffffffbffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(5, 6);
                        }

                        break;

                    case 6:

                        if ((curChar == 34) && (kind > 34))
                        {
                            kind = 34;
                        }

                        break;

                    case 7:

                        if (curChar == 39)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }

                        break;

                    case 8:

                        if ((0xffffff7fffffdbffL & l) != 0L)
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }

                        break;

                    case 9:

                        if ((curChar == 39) && (kind > 34))
                        {
                            kind = 34;
                        }

                        break;

                    case 10:

                        if (((0x8400000000L & l) != 0L) && (kind > 34))
                        {
                            kind = 34;
                        }

                        break;

                    case 11:

                        if (curChar == 45)
                        {
                            jjAddStates(16, 17);
                        }

                        break;

                    case 13:

                        if (curChar == 32)
                        {
                            jjCheckNAddTwoStates(13, 14);
                        }

                        break;

                    case 14:

                        if ((curChar == 62) && (kind > 31))
                        {
                            kind = 31;
                        }

                        break;

                    case 15:

                        if ((curChar == 62) && (kind > 31))
                        {
                            kind = 31;
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 3:

                        if (kind > 34)
                        {
                            kind = 34;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 5:
                        jjAddStates(7, 8);

                        break;

                    case 8:
                        jjAddStates(9, 10);

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }
            else
            {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do
                {
                    switch (jjstateSet[--i])
                    {
                    case 1:
                    case 3:

                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            break;
                        }

                        if (kind > 34)
                        {
                            kind = 34;
                        }

                        jjCheckNAdd(3);

                        break;

                    case 5:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(7, 8);
                        }

                        break;

                    case 8:

                        if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        {
                            jjAddStates(9, 10);
                        }

                        break;

                    default:
                        break;
                    }
                }
                while (i != startsAt);
            }

            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }

            ++curPos;

            if ((i = jjnewStateCnt) == (startsAt = 16 -
                        (jjnewStateCnt = startsAt)))
            {
                return curPos;
            }

            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
        long l1, long l2)
    {
        switch (hiByte)
        {
        case 0:
            return ((jjbitVec2[i2] & l2) != 0L);

        default:

            if ((jjbitVec0[i1] & l1) != 0L)
            {
                return true;
            }

            return false;
        }
    }

    public void ReInit(CharStream stream)
    {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;

        for (i = 16; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    public void ReInit(CharStream stream, int lexState)
    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState)
    {
        if ((lexState >= 8) || (lexState < 0))
        {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " +
                lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
        }
        else
        {
            curLexState = lexState;
        }
    }

    protected Token jjFillToken()
    {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;

        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();

        return t;
    }

    public Token getNextToken()
    {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

EOFLoop: 
        for (;;)
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e)
            {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();

                return matchedToken;
            }

            image = null;
            jjimageLen = 0;

            switch (curLexState)
            {
            case 0:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_0();

                break;

            case 1:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_1();

                break;

            case 2:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_2();

                break;

            case 3:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_3();

                break;

            case 4:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_4();

                if ((jjmatchedPos == 0) && (jjmatchedKind > 30))
                {
                    jjmatchedKind = 30;
                }

                break;

            case 5:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_5();

                if ((jjmatchedPos == 0) && (jjmatchedKind > 27))
                {
                    jjmatchedKind = 27;
                }

                break;

            case 6:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_6();

                if ((jjmatchedPos == 0) && (jjmatchedKind > 20))
                {
                    jjmatchedKind = 20;
                }

                break;

            case 7:
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_7();

                break;
            }

            if (jjmatchedKind != 0x7fffffff)
            {
                if ((jjmatchedPos + 1) < curPos)
                {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }

                matchedToken = jjFillToken();
                TokenLexicalActions(matchedToken);

                if (jjnewLexState[jjmatchedKind] != -1)
                {
                    curLexState = jjnewLexState[jjmatchedKind];
                }

                return matchedToken;
            }

            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;

            try
            {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1)
            {
                EOFSeen = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();

                if ((curChar == '\n') || (curChar == '\r'))
                {
                    error_line++;
                    error_column = 0;
                }
                else
                {
                    error_column++;
                }
            }

            if (!EOFSeen)
            {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
            }

            throw new TokenMgrError(EOFSeen, curLexState, error_line,
                error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void TokenLexicalActions(Token matchedToken)
    {
        switch (jjmatchedKind)
        {
        case 26:

            if (image == null)
            {
                image = new StringBuffer();
            }

            image.append(jjstrLiteralImages[26]);

            Token t = new Token();
            t.image = "<";
            t.kind = TAG_START;
            t.next = matchedToken.next;
            t.beginLine = matchedToken.beginLine;
            t.beginColumn = matchedToken.beginColumn;
            t.endLine = matchedToken.endLine;
            t.endColumn = matchedToken.endColumn;
            matchedToken.next = t;
            matchedToken.kind = TAG_END;
            matchedToken.image = ">";

            break;

        default:
            break;
        }
    }
}
